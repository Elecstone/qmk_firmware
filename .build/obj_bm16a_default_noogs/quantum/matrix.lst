   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init,"ax",@progbits
  11               	.global	matrix_init
  13               	matrix_init:
  14               	.LFB117:
  15               		.file 1 "quantum/matrix.c"
   1:quantum/matrix.c **** /*
   2:quantum/matrix.c **** Copyright 2012-2018 Jun Wako, Jack Humbert, Yiancar
   3:quantum/matrix.c **** 
   4:quantum/matrix.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/matrix.c **** it under the terms of the GNU General Public License as published by
   6:quantum/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/matrix.c **** (at your option) any later version.
   8:quantum/matrix.c **** 
   9:quantum/matrix.c **** This program is distributed in the hope that it will be useful,
  10:quantum/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/matrix.c **** GNU General Public License for more details.
  13:quantum/matrix.c **** 
  14:quantum/matrix.c **** You should have received a copy of the GNU General Public License
  15:quantum/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/matrix.c **** */
  17:quantum/matrix.c **** #include <stdint.h>
  18:quantum/matrix.c **** #include <stdbool.h>
  19:quantum/matrix.c **** #include "wait.h"
  20:quantum/matrix.c **** #include "util.h"
  21:quantum/matrix.c **** #include "matrix.h"
  22:quantum/matrix.c **** #include "debounce.h"
  23:quantum/matrix.c **** #include "quantum.h"
  24:quantum/matrix.c **** 
  25:quantum/matrix.c **** #ifdef DIRECT_PINS
  26:quantum/matrix.c **** static pin_t direct_pins[MATRIX_ROWS][MATRIX_COLS] = DIRECT_PINS;
  27:quantum/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL) || (DIODE_DIRECTION == COL2ROW)
  28:quantum/matrix.c **** static const pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  29:quantum/matrix.c **** static const pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  30:quantum/matrix.c **** #endif
  31:quantum/matrix.c **** 
  32:quantum/matrix.c **** /* matrix state(1:on, 0:off) */
  33:quantum/matrix.c **** extern matrix_row_t raw_matrix[MATRIX_ROWS];  // raw values
  34:quantum/matrix.c **** extern matrix_row_t matrix[MATRIX_ROWS];      // debounced values
  35:quantum/matrix.c **** 
  36:quantum/matrix.c **** // matrix code
  37:quantum/matrix.c **** 
  38:quantum/matrix.c **** #ifdef DIRECT_PINS
  39:quantum/matrix.c **** 
  40:quantum/matrix.c **** static void init_pins(void) {
  41:quantum/matrix.c ****     for (int row = 0; row < MATRIX_ROWS; row++) {
  42:quantum/matrix.c ****         for (int col = 0; col < MATRIX_COLS; col++) {
  43:quantum/matrix.c ****             pin_t pin = direct_pins[row][col];
  44:quantum/matrix.c ****             if (pin != NO_PIN) {
  45:quantum/matrix.c ****                 setPinInputHigh(pin);
  46:quantum/matrix.c ****             }
  47:quantum/matrix.c ****         }
  48:quantum/matrix.c ****     }
  49:quantum/matrix.c **** }
  50:quantum/matrix.c **** 
  51:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row) {
  52:quantum/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
  53:quantum/matrix.c ****     current_matrix[current_row] = 0;
  54:quantum/matrix.c **** 
  55:quantum/matrix.c ****     for (uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
  56:quantum/matrix.c ****         pin_t pin = direct_pins[current_row][col_index];
  57:quantum/matrix.c ****         if (pin != NO_PIN) {
  58:quantum/matrix.c ****             current_matrix[current_row] |= readPin(pin) ? 0 : (MATRIX_ROW_SHIFTER << col_index);
  59:quantum/matrix.c ****         }
  60:quantum/matrix.c ****     }
  61:quantum/matrix.c **** 
  62:quantum/matrix.c ****     return (last_row_value != current_matrix[current_row]);
  63:quantum/matrix.c **** }
  64:quantum/matrix.c **** 
  65:quantum/matrix.c **** #elif defined(DIODE_DIRECTION)
  66:quantum/matrix.c **** #    if (DIODE_DIRECTION == COL2ROW)
  67:quantum/matrix.c **** 
  68:quantum/matrix.c **** static void select_row(uint8_t row) {
  69:quantum/matrix.c ****     setPinOutput(row_pins[row]);
  70:quantum/matrix.c ****     writePinLow(row_pins[row]);
  71:quantum/matrix.c **** }
  72:quantum/matrix.c **** 
  73:quantum/matrix.c **** static void unselect_row(uint8_t row) { setPinInputHigh(row_pins[row]); }
  74:quantum/matrix.c **** 
  75:quantum/matrix.c **** static void unselect_rows(void) {
  76:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
  77:quantum/matrix.c ****         setPinInputHigh(row_pins[x]);
  78:quantum/matrix.c ****     }
  79:quantum/matrix.c **** }
  80:quantum/matrix.c **** 
  81:quantum/matrix.c **** static void init_pins(void) {
  82:quantum/matrix.c ****     unselect_rows();
  83:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_COLS; x++) {
  84:quantum/matrix.c ****         setPinInputHigh(col_pins[x]);
  85:quantum/matrix.c ****     }
  86:quantum/matrix.c **** }
  87:quantum/matrix.c **** 
  88:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row) {
  89:quantum/matrix.c ****     // Store last value of row prior to reading
  90:quantum/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
  91:quantum/matrix.c **** 
  92:quantum/matrix.c ****     // Clear data in matrix row
  93:quantum/matrix.c ****     current_matrix[current_row] = 0;
  94:quantum/matrix.c **** 
  95:quantum/matrix.c ****     // Select row and wait for row selecton to stabilize
  96:quantum/matrix.c ****     select_row(current_row);
  97:quantum/matrix.c ****     wait_us(30);
  98:quantum/matrix.c **** 
  99:quantum/matrix.c ****     // For each col...
 100:quantum/matrix.c ****     for (uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 101:quantum/matrix.c ****         // Select the col pin to read (active low)
 102:quantum/matrix.c ****         uint8_t pin_state = readPin(col_pins[col_index]);
 103:quantum/matrix.c **** 
 104:quantum/matrix.c ****         // Populate the matrix row with the state of the col pin
 105:quantum/matrix.c ****         current_matrix[current_row] |= pin_state ? 0 : (MATRIX_ROW_SHIFTER << col_index);
 106:quantum/matrix.c ****     }
 107:quantum/matrix.c **** 
 108:quantum/matrix.c ****     // Unselect row
 109:quantum/matrix.c ****     unselect_row(current_row);
 110:quantum/matrix.c **** 
 111:quantum/matrix.c ****     return (last_row_value != current_matrix[current_row]);
 112:quantum/matrix.c **** }
 113:quantum/matrix.c **** 
 114:quantum/matrix.c **** #    elif (DIODE_DIRECTION == ROW2COL)
 115:quantum/matrix.c **** 
 116:quantum/matrix.c **** static void select_col(uint8_t col) {
 117:quantum/matrix.c ****     setPinOutput(col_pins[col]);
 118:quantum/matrix.c ****     writePinLow(col_pins[col]);
 119:quantum/matrix.c **** }
 120:quantum/matrix.c **** 
 121:quantum/matrix.c **** static void unselect_col(uint8_t col) { setPinInputHigh(col_pins[col]); }
 122:quantum/matrix.c **** 
 123:quantum/matrix.c **** static void unselect_cols(void) {
 124:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_COLS; x++) {
 125:quantum/matrix.c ****         setPinInputHigh(col_pins[x]);
 126:quantum/matrix.c ****     }
 127:quantum/matrix.c **** }
 128:quantum/matrix.c **** 
 129:quantum/matrix.c **** static void init_pins(void) {
 130:quantum/matrix.c ****     unselect_cols();
 131:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
 132:quantum/matrix.c ****         setPinInputHigh(row_pins[x]);
 133:quantum/matrix.c ****     }
 134:quantum/matrix.c **** }
 135:quantum/matrix.c **** 
 136:quantum/matrix.c **** static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col) {
 137:quantum/matrix.c ****     bool matrix_changed = false;
 138:quantum/matrix.c **** 
 139:quantum/matrix.c ****     // Select col and wait for col selecton to stabilize
 140:quantum/matrix.c ****     select_col(current_col);
 141:quantum/matrix.c ****     wait_us(30);
 142:quantum/matrix.c **** 
 143:quantum/matrix.c ****     // For each row...
 144:quantum/matrix.c ****     for (uint8_t row_index = 0; row_index < MATRIX_ROWS; row_index++) {
 145:quantum/matrix.c ****         // Store last value of row prior to reading
 146:quantum/matrix.c ****         matrix_row_t last_row_value = current_matrix[row_index];
 147:quantum/matrix.c **** 
 148:quantum/matrix.c ****         // Check row pin state
 149:quantum/matrix.c ****         if (readPin(row_pins[row_index]) == 0) {
 150:quantum/matrix.c ****             // Pin LO, set col bit
 151:quantum/matrix.c ****             current_matrix[row_index] |= (MATRIX_ROW_SHIFTER << current_col);
 152:quantum/matrix.c ****         } else {
 153:quantum/matrix.c ****             // Pin HI, clear col bit
 154:quantum/matrix.c ****             current_matrix[row_index] &= ~(MATRIX_ROW_SHIFTER << current_col);
 155:quantum/matrix.c ****         }
 156:quantum/matrix.c **** 
 157:quantum/matrix.c ****         // Determine if the matrix changed state
 158:quantum/matrix.c ****         if ((last_row_value != current_matrix[row_index]) && !(matrix_changed)) {
 159:quantum/matrix.c ****             matrix_changed = true;
 160:quantum/matrix.c ****         }
 161:quantum/matrix.c ****     }
 162:quantum/matrix.c **** 
 163:quantum/matrix.c ****     // Unselect col
 164:quantum/matrix.c ****     unselect_col(current_col);
 165:quantum/matrix.c **** 
 166:quantum/matrix.c ****     return matrix_changed;
 167:quantum/matrix.c **** }
 168:quantum/matrix.c **** 
 169:quantum/matrix.c **** #    else
 170:quantum/matrix.c **** #        error DIODE_DIRECTION must be one of COL2ROW or ROW2COL!
 171:quantum/matrix.c **** #    endif
 172:quantum/matrix.c **** #else
 173:quantum/matrix.c **** #    error DIODE_DIRECTION is not defined!
 174:quantum/matrix.c **** #endif
 175:quantum/matrix.c **** 
 176:quantum/matrix.c **** void matrix_init(void) {
  16               		.loc 1 176 24 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
 177:quantum/matrix.c ****     // initialize key pins
 178:quantum/matrix.c ****     init_pins();
  30               		.loc 1 178 5 view .LVU1
  31               	.LBB17:
  32               	.LBI17:
  81:quantum/matrix.c ****     unselect_rows();
  33               		.loc 1 81 13 view .LVU2
  34               	.LBE17:
  82:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_COLS; x++) {
  35               		.loc 1 82 5 view .LVU3
  36               	.LBB21:
  37               	.LBB18:
  38               	.LBI18:
  75:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
  39               		.loc 1 75 13 view .LVU4
  40               	.LVL0:
  75:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
  41               		.loc 1 75 13 is_stmt 0 view .LVU5
  42 0004 A0E0      		ldi r26,lo8(row_pins)
  43 0006 B0E0      		ldi r27,hi8(row_pins)
  44 0008 40E0      		ldi r20,lo8(row_pins+4)
  45 000a 50E0      		ldi r21,hi8(row_pins+4)
  46               	.LBB19:
  77:quantum/matrix.c ****     }
  47               		.loc 1 77 9 view .LVU6
  48 000c C1E0      		ldi r28,lo8(1)
  49 000e D0E0      		ldi r29,0
  50               	.LVL1:
  51               	.L2:
  77:quantum/matrix.c ****     }
  52               		.loc 1 77 9 is_stmt 1 view .LVU7
  53 0010 8D91      		ld r24,X+
  54               	.LVL2:
  77:quantum/matrix.c ****     }
  55               		.loc 1 77 9 is_stmt 0 view .LVU8
  56 0012 E82F      		mov r30,r24
  57 0014 E295      		swap r30
  58 0016 EF70      		andi r30,lo8(15)
  59 0018 F0E0      		ldi r31,0
  60 001a 61A1      		ldd r22,Z+33
  61 001c 8F70      		andi r24,lo8(15)
  62 001e 9E01      		movw r18,r28
  63 0020 00C0      		rjmp 2f
  64               		1:
  65 0022 220F      		lsl r18
  66               		2:
  67 0024 8A95      		dec r24
  68 0026 02F4      		brpl 1b
  69 0028 922F      		mov r25,r18
  70 002a 9095      		com r25
  71 002c 9623      		and r25,r22
  72 002e 91A3      		std Z+33,r25
  73 0030 82A1      		ldd r24,Z+34
  74 0032 822B      		or r24,r18
  75 0034 82A3      		std Z+34,r24
  76               	.LVL3:
  76:quantum/matrix.c ****         setPinInputHigh(row_pins[x]);
  77               		.loc 1 76 5 view .LVU9
  78 0036 4A17      		cp r20,r26
  79 0038 5B07      		cpc r21,r27
  80 003a 01F4      		brne .L2
  81 003c A0E0      		ldi r26,lo8(col_pins)
  82 003e B0E0      		ldi r27,hi8(col_pins)
  83               	.LVL4:
  76:quantum/matrix.c ****         setPinInputHigh(row_pins[x]);
  84               		.loc 1 76 5 view .LVU10
  85 0040 40E0      		ldi r20,lo8(col_pins+4)
  86 0042 50E0      		ldi r21,hi8(col_pins+4)
  87               	.LBE19:
  88               	.LBE18:
  89               	.LBB20:
  84:quantum/matrix.c ****     }
  90               		.loc 1 84 9 view .LVU11
  91 0044 C1E0      		ldi r28,lo8(1)
  92 0046 D0E0      		ldi r29,0
  93               	.L3:
  94               	.LVL5:
  84:quantum/matrix.c ****     }
  95               		.loc 1 84 9 is_stmt 1 view .LVU12
  96 0048 8D91      		ld r24,X+
  97               	.LVL6:
  84:quantum/matrix.c ****     }
  98               		.loc 1 84 9 is_stmt 0 view .LVU13
  99 004a E82F      		mov r30,r24
 100 004c E295      		swap r30
 101 004e EF70      		andi r30,lo8(15)
 102 0050 F0E0      		ldi r31,0
 103 0052 61A1      		ldd r22,Z+33
 104 0054 8F70      		andi r24,lo8(15)
 105 0056 9E01      		movw r18,r28
 106 0058 00C0      		rjmp 2f
 107               		1:
 108 005a 220F      		lsl r18
 109               		2:
 110 005c 8A95      		dec r24
 111 005e 02F4      		brpl 1b
 112 0060 922F      		mov r25,r18
 113 0062 9095      		com r25
 114 0064 9623      		and r25,r22
 115 0066 91A3      		std Z+33,r25
 116 0068 82A1      		ldd r24,Z+34
 117 006a 822B      		or r24,r18
 118 006c 82A3      		std Z+34,r24
 119               	.LVL7:
  83:quantum/matrix.c ****         setPinInputHigh(col_pins[x]);
 120               		.loc 1 83 5 view .LVU14
 121 006e 4A17      		cp r20,r26
 122 0070 5B07      		cpc r21,r27
 123 0072 01F4      		brne .L3
 124               	.LVL8:
  83:quantum/matrix.c ****         setPinInputHigh(col_pins[x]);
 125               		.loc 1 83 5 view .LVU15
 126               	.LBE20:
 127               	.LBE21:
 128               	.LBB22:
 179:quantum/matrix.c **** 
 180:quantum/matrix.c ****     // initialize matrix state: all keys off
 181:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 182:quantum/matrix.c ****         raw_matrix[i] = 0;
 129               		.loc 1 182 9 is_stmt 1 view .LVU16
 130               		.loc 1 182 23 is_stmt 0 view .LVU17
 131 0074 1092 0000 		sts raw_matrix,__zero_reg__
 183:quantum/matrix.c ****         matrix[i]     = 0;
 132               		.loc 1 183 9 is_stmt 1 view .LVU18
 133               		.loc 1 183 23 is_stmt 0 view .LVU19
 134 0078 1092 0000 		sts matrix,__zero_reg__
 135               	.LVL9:
 182:quantum/matrix.c ****         matrix[i]     = 0;
 136               		.loc 1 182 9 is_stmt 1 view .LVU20
 182:quantum/matrix.c ****         matrix[i]     = 0;
 137               		.loc 1 182 23 is_stmt 0 view .LVU21
 138 007c 1092 0000 		sts raw_matrix+1,__zero_reg__
 139               		.loc 1 183 9 is_stmt 1 view .LVU22
 140               		.loc 1 183 23 is_stmt 0 view .LVU23
 141 0080 1092 0000 		sts matrix+1,__zero_reg__
 142               	.LVL10:
 182:quantum/matrix.c ****         matrix[i]     = 0;
 143               		.loc 1 182 9 is_stmt 1 view .LVU24
 182:quantum/matrix.c ****         matrix[i]     = 0;
 144               		.loc 1 182 23 is_stmt 0 view .LVU25
 145 0084 1092 0000 		sts raw_matrix+2,__zero_reg__
 146               		.loc 1 183 9 is_stmt 1 view .LVU26
 147               		.loc 1 183 23 is_stmt 0 view .LVU27
 148 0088 1092 0000 		sts matrix+2,__zero_reg__
 149               	.LVL11:
 182:quantum/matrix.c ****         matrix[i]     = 0;
 150               		.loc 1 182 9 is_stmt 1 view .LVU28
 182:quantum/matrix.c ****         matrix[i]     = 0;
 151               		.loc 1 182 23 is_stmt 0 view .LVU29
 152 008c 1092 0000 		sts raw_matrix+3,__zero_reg__
 153               		.loc 1 183 9 is_stmt 1 view .LVU30
 154               		.loc 1 183 23 is_stmt 0 view .LVU31
 155 0090 1092 0000 		sts matrix+3,__zero_reg__
 156               	.LVL12:
 157               		.loc 1 183 23 view .LVU32
 158               	.LBE22:
 184:quantum/matrix.c ****     }
 185:quantum/matrix.c **** 
 186:quantum/matrix.c ****     debounce_init(MATRIX_ROWS);
 159               		.loc 1 186 5 is_stmt 1 view .LVU33
 160 0094 84E0      		ldi r24,lo8(4)
 161 0096 0E94 0000 		call debounce_init
 162               	.LVL13:
 187:quantum/matrix.c **** 
 188:quantum/matrix.c ****     matrix_init_quantum();
 163               		.loc 1 188 5 view .LVU34
 164               	/* epilogue start */
 189:quantum/matrix.c **** }
 165               		.loc 1 189 1 is_stmt 0 view .LVU35
 166 009a DF91      		pop r29
 167 009c CF91      		pop r28
 188:quantum/matrix.c **** }
 168               		.loc 1 188 5 view .LVU36
 169 009e 0C94 0000 		jmp matrix_init_quantum
 170               	.LVL14:
 171               		.cfi_endproc
 172               	.LFE117:
 174               		.section	.text.matrix_scan,"ax",@progbits
 175               	.global	matrix_scan
 177               	matrix_scan:
 178               	.LFB118:
 190:quantum/matrix.c **** 
 191:quantum/matrix.c **** uint8_t matrix_scan(void) {
 179               		.loc 1 191 27 is_stmt 1 view -0
 180               		.cfi_startproc
 181 0000 7F92      		push r7
 182               	.LCFI2:
 183               		.cfi_def_cfa_offset 3
 184               		.cfi_offset 7, -2
 185 0002 8F92      		push r8
 186               	.LCFI3:
 187               		.cfi_def_cfa_offset 4
 188               		.cfi_offset 8, -3
 189 0004 9F92      		push r9
 190               	.LCFI4:
 191               		.cfi_def_cfa_offset 5
 192               		.cfi_offset 9, -4
 193 0006 AF92      		push r10
 194               	.LCFI5:
 195               		.cfi_def_cfa_offset 6
 196               		.cfi_offset 10, -5
 197 0008 BF92      		push r11
 198               	.LCFI6:
 199               		.cfi_def_cfa_offset 7
 200               		.cfi_offset 11, -6
 201 000a CF92      		push r12
 202               	.LCFI7:
 203               		.cfi_def_cfa_offset 8
 204               		.cfi_offset 12, -7
 205 000c DF92      		push r13
 206               	.LCFI8:
 207               		.cfi_def_cfa_offset 9
 208               		.cfi_offset 13, -8
 209 000e EF92      		push r14
 210               	.LCFI9:
 211               		.cfi_def_cfa_offset 10
 212               		.cfi_offset 14, -9
 213 0010 FF92      		push r15
 214               	.LCFI10:
 215               		.cfi_def_cfa_offset 11
 216               		.cfi_offset 15, -10
 217 0012 0F93      		push r16
 218               	.LCFI11:
 219               		.cfi_def_cfa_offset 12
 220               		.cfi_offset 16, -11
 221 0014 1F93      		push r17
 222               	.LCFI12:
 223               		.cfi_def_cfa_offset 13
 224               		.cfi_offset 17, -12
 225 0016 CF93      		push r28
 226               	.LCFI13:
 227               		.cfi_def_cfa_offset 14
 228               		.cfi_offset 28, -13
 229 0018 DF93      		push r29
 230               	.LCFI14:
 231               		.cfi_def_cfa_offset 15
 232               		.cfi_offset 29, -14
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 13 */
 236               	.L__stack_usage = 13
 192:quantum/matrix.c ****     bool changed = false;
 237               		.loc 1 192 5 view .LVU38
 238               	.LVL15:
 193:quantum/matrix.c **** 
 194:quantum/matrix.c **** #if defined(DIRECT_PINS) || (DIODE_DIRECTION == COL2ROW)
 195:quantum/matrix.c ****     // Set row, read cols
 196:quantum/matrix.c ****     for (uint8_t current_row = 0; current_row < MATRIX_ROWS; current_row++) {
 239               		.loc 1 196 5 view .LVU39
 240               	.LBB34:
 241               		.loc 1 196 10 view .LVU40
 242               		.loc 1 196 10 is_stmt 0 view .LVU41
 243 001a 20E0      		ldi r18,lo8(raw_matrix)
 244 001c 30E0      		ldi r19,hi8(raw_matrix)
 245 001e 00E0      		ldi r16,lo8(row_pins)
 246 0020 10E0      		ldi r17,hi8(row_pins)
 247               	.LBE34:
 192:quantum/matrix.c ****     bool changed = false;
 248               		.loc 1 192 10 view .LVU42
 249 0022 712C      		mov r7,__zero_reg__
 250               	.LBB56:
 251               	.LBB35:
 252               	.LBB36:
 253               	.LBB37:
 254               	.LBB38:
  69:quantum/matrix.c ****     writePinLow(row_pins[row]);
 255               		.loc 1 69 5 view .LVU43
 256 0024 EE24      		clr r14
 257 0026 E394      		inc r14
 258 0028 F12C      		mov r15,__zero_reg__
 259               	.LVL16:
 260               	.L10:
  69:quantum/matrix.c ****     writePinLow(row_pins[row]);
 261               		.loc 1 69 5 view .LVU44
 262               	.LBE38:
 263               	.LBE37:
 264               	.LBE36:
 265               	.LBE35:
 197:quantum/matrix.c ****         changed |= read_cols_on_row(raw_matrix, current_row);
 266               		.loc 1 197 9 is_stmt 1 view .LVU45
 267               	.LBB54:
 268               	.LBI35:
  88:quantum/matrix.c ****     // Store last value of row prior to reading
 269               		.loc 1 88 13 view .LVU46
 270               	.LBB52:
  90:quantum/matrix.c **** 
 271               		.loc 1 90 5 view .LVU47
  90:quantum/matrix.c **** 
 272               		.loc 1 90 18 is_stmt 0 view .LVU48
 273 002a E901      		movw r28,r18
 274 002c B990      		ld r11,Y+
 275 002e 9E01      		movw r18,r28
 276               	.LVL17:
  93:quantum/matrix.c **** 
 277               		.loc 1 93 5 is_stmt 1 view .LVU49
 278 0030 DE01      		movw r26,r28
  93:quantum/matrix.c **** 
 279               		.loc 1 93 33 is_stmt 0 view .LVU50
 280 0032 1E92      		st -X,__zero_reg__
  96:quantum/matrix.c ****     wait_us(30);
 281               		.loc 1 96 5 is_stmt 1 view .LVU51
 282               	.LVL18:
 283               	.LBB40:
 284               	.LBI37:
  68:quantum/matrix.c ****     setPinOutput(row_pins[row]);
 285               		.loc 1 68 13 view .LVU52
 286               	.LBB39:
  69:quantum/matrix.c ****     writePinLow(row_pins[row]);
 287               		.loc 1 69 5 view .LVU53
 288 0034 F801      		movw r30,r16
 289 0036 8191      		ld r24,Z+
 290 0038 8F01      		movw r16,r30
 291 003a E82F      		mov r30,r24
 292 003c E295      		swap r30
 293 003e EF70      		andi r30,lo8(15)
 294 0040 F0E0      		ldi r31,0
 295 0042 91A1      		ldd r25,Z+33
 296 0044 8F70      		andi r24,lo8(15)
 297 0046 B701      		movw r22,r14
 298 0048 00C0      		rjmp 2f
 299               		1:
 300 004a 660F      		lsl r22
 301               		2:
 302 004c 8A95      		dec r24
 303 004e 02F4      		brpl 1b
 304 0050 892F      		mov r24,r25
 305 0052 862B      		or r24,r22
 306 0054 81A3      		std Z+33,r24
  70:quantum/matrix.c **** }
 307               		.loc 1 70 5 view .LVU54
 308 0056 82A1      		ldd r24,Z+34
 309 0058 A62E      		mov r10,r22
 310 005a A094      		com r10
 311 005c 8A21      		and r24,r10
 312 005e 82A3      		std Z+34,r24
 313               	.LVL19:
  70:quantum/matrix.c **** }
 314               		.loc 1 70 5 is_stmt 0 view .LVU55
 315               	.LBE39:
 316               	.LBE40:
  97:quantum/matrix.c **** 
 317               		.loc 1 97 5 is_stmt 1 view .LVU56
 318               	.LBB41:
 319               	.LBI41:
 320               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_us(double __us)
 321               		.loc 2 255 1 view .LVU57
 322               	.LBB42:
 256:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 323               		.loc 2 257 2 view .LVU58
 258:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 324               		.loc 2 261 2 view .LVU59
 262:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 325               		.loc 2 262 2 view .LVU60
 263:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 326               		.loc 2 263 2 view .LVU61
 264:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 327               		.loc 2 273 3 view .LVU62
 274:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 328               		.loc 2 276 2 view .LVU63
 329 0060 80EA      		ldi r24,lo8(-96)
 330 0062 8A95      	1:	dec r24
 331 0064 01F4      		brne 1b
 332               	.LVL20:
 333               		.loc 2 276 2 is_stmt 0 view .LVU64
 334               	.LBE42:
 335               	.LBE41:
 100:quantum/matrix.c ****         // Select the col pin to read (active low)
 336               		.loc 1 100 5 is_stmt 1 view .LVU65
 337               	.LBB44:
 100:quantum/matrix.c ****         // Select the col pin to read (active low)
 338               		.loc 1 100 10 view .LVU66
 100:quantum/matrix.c ****         // Select the col pin to read (active low)
 339               		.loc 1 100 10 is_stmt 0 view .LVU67
 340 0066 80E0      		ldi r24,lo8(col_pins)
 341 0068 C82E      		mov r12,r24
 342 006a 80E0      		ldi r24,hi8(col_pins)
 343 006c D82E      		mov r13,r24
 344               	.LBE44:
 345               	.LBB47:
 346               	.LBB43:
 347               		.loc 2 276 2 view .LVU68
 348 006e 50E0      		ldi r21,0
 349 0070 40E0      		ldi r20,0
 350               	.LVL21:
 351               	.L8:
 352               		.loc 2 276 2 view .LVU69
 353               	.LBE43:
 354               	.LBE47:
 355               	.LBB48:
 356               	.LBB45:
 102:quantum/matrix.c **** 
 357               		.loc 1 102 9 is_stmt 1 view .LVU70
 102:quantum/matrix.c **** 
 358               		.loc 1 102 29 is_stmt 0 view .LVU71
 359 0072 E601      		movw r28,r12
 360 0074 8990      		ld r8,Y+
 361 0076 6E01      		movw r12,r28
 362 0078 882D      		mov r24,r8
 363 007a 8295      		swap r24
 364 007c 8F70      		andi r24,lo8(15)
 365 007e 90E0      		ldi r25,0
 366 0080 EC01      		movw r28,r24
 367 0082 88A1      		ldd r24,Y+32
 368               	.LVL22:
 105:quantum/matrix.c ****     }
 369               		.loc 1 105 9 is_stmt 1 view .LVU72
 105:quantum/matrix.c ****     }
 370               		.loc 1 105 37 is_stmt 0 view .LVU73
 371 0084 9C90      		ld r9,X
 102:quantum/matrix.c **** 
 372               		.loc 1 102 29 view .LVU74
 373 0086 90E0      		ldi r25,0
 374 0088 D82D      		mov r29,r8
 375 008a DF70      		andi r29,lo8(15)
 376               	.LVL23:
 102:quantum/matrix.c **** 
 377               		.loc 1 102 29 view .LVU75
 378 008c 00C0      		rjmp 2f
 379               		1:
 380 008e 9595      		asr r25
 381 0090 8795      		ror r24
 382               		2:
 383 0092 DA95      		dec r29
 384 0094 02F4      		brpl 1b
 385               	.LVL24:
 105:quantum/matrix.c ****     }
 386               		.loc 1 105 37 view .LVU76
 387 0096 80FD      		sbrc r24,0
 388 0098 00C0      		rjmp .L11
 389 009a 8E2D      		mov r24,r14
 390 009c 042E      		mov r0,r20
 391 009e 00C0      		rjmp 2f
 392               		1:
 393 00a0 880F      		lsl r24
 394               		2:
 395 00a2 0A94      		dec r0
 396 00a4 02F4      		brpl 1b
 397               	.L7:
 398 00a6 8929      		or r24,r9
 399 00a8 8C93      		st X,r24
 400               	.LVL25:
 105:quantum/matrix.c ****     }
 401               		.loc 1 105 37 view .LVU77
 402 00aa 4F5F      		subi r20,-1
 403 00ac 5F4F      		sbci r21,-1
 404               	.LVL26:
 105:quantum/matrix.c ****     }
 405               		.loc 1 105 37 view .LVU78
 406               	.LBE45:
 100:quantum/matrix.c ****         // Select the col pin to read (active low)
 407               		.loc 1 100 5 view .LVU79
 408 00ae 4430      		cpi r20,4
 409 00b0 5105      		cpc r21,__zero_reg__
 410 00b2 01F4      		brne .L8
 411               	.LBE48:
 109:quantum/matrix.c **** 
 412               		.loc 1 109 5 is_stmt 1 view .LVU80
 413               	.LVL27:
 414               	.LBB49:
 415               	.LBI49:
  73:quantum/matrix.c **** 
 416               		.loc 1 73 13 view .LVU81
 417               	.LBB50:
  73:quantum/matrix.c **** 
 418               		.loc 1 73 41 view .LVU82
 419 00b4 81A1      		ldd r24,Z+33
 420 00b6 8A21      		and r24,r10
 421 00b8 81A3      		std Z+33,r24
 422 00ba 82A1      		ldd r24,Z+34
 423 00bc 682B      		or r22,r24
 424 00be 62A3      		std Z+34,r22
 425               	.LVL28:
  73:quantum/matrix.c **** 
 426               		.loc 1 73 41 is_stmt 0 view .LVU83
 427               	.LBE50:
 428               	.LBE49:
 111:quantum/matrix.c **** }
 429               		.loc 1 111 5 is_stmt 1 view .LVU84
 111:quantum/matrix.c **** }
 430               		.loc 1 111 28 is_stmt 0 view .LVU85
 431 00c0 81E0      		ldi r24,lo8(1)
 432 00c2 9C91      		ld r25,X
 433 00c4 9B11      		cpse r25,r11
 434 00c6 00C0      		rjmp .L9
 435 00c8 80E0      		ldi r24,0
 436               	.L9:
 437               	.LBE52:
 438               	.LBE54:
 439               		.loc 1 197 17 view .LVU86
 440 00ca 782A      		or r7,r24
 441               	.LVL29:
 196:quantum/matrix.c ****         changed |= read_cols_on_row(raw_matrix, current_row);
 442               		.loc 1 196 5 view .LVU87
 443 00cc D0E0      		ldi r29,hi8(raw_matrix+4)
 444 00ce 2030      		cpi r18,lo8(raw_matrix+4)
 445 00d0 3D07      		cpc r19,r29
 446 00d2 01F0      		breq .+2
 447 00d4 00C0      		rjmp .L10
 448               	.LBE56:
 198:quantum/matrix.c ****     }
 199:quantum/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL)
 200:quantum/matrix.c ****     // Set col, read rows
 201:quantum/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 202:quantum/matrix.c ****         changed |= read_rows_on_col(raw_matrix, current_col);
 203:quantum/matrix.c ****     }
 204:quantum/matrix.c **** #endif
 205:quantum/matrix.c **** 
 206:quantum/matrix.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 449               		.loc 1 206 5 is_stmt 1 view .LVU88
 450 00d6 272D      		mov r18,r7
 451               	.LVL30:
 452               		.loc 1 206 5 is_stmt 0 view .LVU89
 453 00d8 44E0      		ldi r20,lo8(4)
 454 00da 60E0      		ldi r22,lo8(matrix)
 455 00dc 70E0      		ldi r23,hi8(matrix)
 456 00de 80E0      		ldi r24,lo8(raw_matrix)
 457 00e0 90E0      		ldi r25,hi8(raw_matrix)
 458 00e2 0E94 0000 		call debounce
 459               	.LVL31:
 207:quantum/matrix.c **** 
 208:quantum/matrix.c ****     matrix_scan_quantum();
 460               		.loc 1 208 5 is_stmt 1 view .LVU90
 461 00e6 0E94 0000 		call matrix_scan_quantum
 462               	.LVL32:
 209:quantum/matrix.c ****     return (uint8_t)changed;
 463               		.loc 1 209 5 view .LVU91
 210:quantum/matrix.c **** }
 464               		.loc 1 210 1 is_stmt 0 view .LVU92
 465 00ea 872D      		mov r24,r7
 466               	/* epilogue start */
 467 00ec DF91      		pop r29
 468 00ee CF91      		pop r28
 469 00f0 1F91      		pop r17
 470 00f2 0F91      		pop r16
 471 00f4 FF90      		pop r15
 472 00f6 EF90      		pop r14
 473 00f8 DF90      		pop r13
 474 00fa CF90      		pop r12
 475 00fc BF90      		pop r11
 476 00fe AF90      		pop r10
 477 0100 9F90      		pop r9
 478 0102 8F90      		pop r8
 479 0104 7F90      		pop r7
 480               	.LVL33:
 481               		.loc 1 210 1 view .LVU93
 482 0106 0895      		ret
 483               	.LVL34:
 484               	.L11:
 485               	.LBB57:
 486               	.LBB55:
 487               	.LBB53:
 488               	.LBB51:
 489               	.LBB46:
 105:quantum/matrix.c ****     }
 490               		.loc 1 105 37 view .LVU94
 491 0108 80E0      		ldi r24,0
 492 010a 00C0      		rjmp .L7
 493               	.LBE46:
 494               	.LBE51:
 495               	.LBE53:
 496               	.LBE55:
 497               	.LBE57:
 498               		.cfi_endproc
 499               	.LFE118:
 501               		.section	.rodata.col_pins,"a"
 504               	col_pins:
 505 0000 F7        		.byte	-9
 506 0001 F6        		.byte	-10
 507 0002 94        		.byte	-108
 508 0003 96        		.byte	-106
 509               		.section	.rodata.row_pins,"a"
 512               	row_pins:
 513 0000 91        		.byte	-111
 514 0001 90        		.byte	-112
 515 0002 93        		.byte	-109
 516 0003 92        		.byte	-110
 517               		.text
 518               	.Letext0:
 519               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdint.h"
 520               		.file 4 "tmk_core/common/matrix.h"
 521               		.file 5 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/lib/avr-gcc/8/gcc/avr/8.3.0/include/stddef.h"
 522               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 523               		.file 7 "tmk_core/common/action.h"
 524               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 525               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 526               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 527               		.file 11 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdio.h"
 528               		.file 12 "tmk_core/common/report.h"
 529               		.file 13 "tmk_core/common/host.h"
 530               		.file 14 "tmk_core/common/debug.h"
 531               		.file 15 "quantum/keycode_config.h"
 532               		.file 16 "quantum/keymap.h"
 533               		.file 17 "./quantum/color.h"
 534               		.file 18 "quantum/rgblight.h"
 535               		.file 19 "tmk_core/common/action_layer.h"
 536               		.file 20 "tmk_core/common/timer.h"
 537               		.file 21 "tmk_core/common/action_util.h"
 538               		.file 22 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdlib.h"
 539               		.file 23 "quantum/quantum.h"
 540               		.file 24 "quantum/debounce.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:4      *ABS*:000000000000003f __SREG__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:13     .text.matrix_init:0000000000000000 matrix_init
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:512    .rodata.row_pins:0000000000000000 row_pins
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:504    .rodata.col_pins:0000000000000000 col_pins
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//cc7fxm8M.s:177    .text.matrix_scan:0000000000000000 matrix_scan

UNDEFINED SYMBOLS
raw_matrix
matrix
debounce_init
matrix_init_quantum
debounce
matrix_scan_quantum
__do_copy_data
