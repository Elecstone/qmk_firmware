   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB106:
  15               		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "action_layer.h"
  24:tmk_core/common/action.c **** #include "action_tapping.h"
  25:tmk_core/common/action.c **** #include "action_macro.h"
  26:tmk_core/common/action.c **** #include "action_util.h"
  27:tmk_core/common/action.c **** #include "action.h"
  28:tmk_core/common/action.c **** #include "wait.h"
  29:tmk_core/common/action.c **** 
  30:tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
  31:tmk_core/common/action.c **** #    include "backlight.h"
  32:tmk_core/common/action.c **** #endif
  33:tmk_core/common/action.c **** 
  34:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  35:tmk_core/common/action.c **** #    include "debug.h"
  36:tmk_core/common/action.c **** #else
  37:tmk_core/common/action.c **** #    include "nodebug.h"
  38:tmk_core/common/action.c **** #endif
  39:tmk_core/common/action.c **** 
  40:tmk_core/common/action.c **** int tp_buttons;
  41:tmk_core/common/action.c **** 
  42:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  43:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  44:tmk_core/common/action.c **** #endif
  45:tmk_core/common/action.c **** 
  46:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  47:tmk_core/common/action.c **** #    include <fauxclicky.h>
  48:tmk_core/common/action.c **** #endif
  49:tmk_core/common/action.c **** 
  50:tmk_core/common/action.c **** #ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
  51:tmk_core/common/action.c **** __attribute__((weak)) bool get_ignore_mod_tap_interrupt(uint16_t keycode) { return false; }
  52:tmk_core/common/action.c **** #endif
  53:tmk_core/common/action.c **** 
  54:tmk_core/common/action.c **** #ifndef TAP_CODE_DELAY
  55:tmk_core/common/action.c **** #    define TAP_CODE_DELAY 0
  56:tmk_core/common/action.c **** #endif
  57:tmk_core/common/action.c **** #ifndef TAP_HOLD_CAPS_DELAY
  58:tmk_core/common/action.c **** #    define TAP_HOLD_CAPS_DELAY 80
  59:tmk_core/common/action.c **** #endif
  60:tmk_core/common/action.c **** /** \brief Called to execute an action.
  61:tmk_core/common/action.c ****  *
  62:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  63:tmk_core/common/action.c ****  */
  64:tmk_core/common/action.c **** void action_exec(keyevent_t event) {
  16               		.loc 1 64 36 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  65:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  48               		.loc 1 65 5 view .LVU1
  66:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  67:tmk_core/common/action.c ****         dprint("EVENT: ");
  68:tmk_core/common/action.c ****         debug_event(event);
  69:tmk_core/common/action.c ****         dprintln();
  49               		.loc 1 69 19 view .LVU2
  70:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  71:tmk_core/common/action.c ****         retro_tapping_counter++;
  72:tmk_core/common/action.c **** #endif
  73:tmk_core/common/action.c ****     }
  74:tmk_core/common/action.c **** 
  75:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  76:tmk_core/common/action.c ****     if (IS_PRESSED(event)) {
  77:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_PRESS;
  78:tmk_core/common/action.c ****     }
  79:tmk_core/common/action.c ****     if (IS_RELEASED(event)) {
  80:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_RELEASE;
  81:tmk_core/common/action.c ****     }
  82:tmk_core/common/action.c ****     fauxclicky_check();
  83:tmk_core/common/action.c **** #endif
  84:tmk_core/common/action.c **** 
  85:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  86:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  87:tmk_core/common/action.c ****         process_hand_swap(&event);
  88:tmk_core/common/action.c ****     }
  89:tmk_core/common/action.c **** #endif
  90:tmk_core/common/action.c **** 
  91:tmk_core/common/action.c ****     keyrecord_t record = {.event = event};
  50               		.loc 1 91 5 view .LVU3
  51               		.loc 1 91 17 is_stmt 0 view .LVU4
  52 001e 1E82      		std Y+6,__zero_reg__
  53 0020 1D82      		std Y+5,__zero_reg__
  54 0022 85E0      		ldi r24,lo8(5)
  55 0024 FE01      		movw r30,r28
  56 0026 3796      		adiw r30,7
  57 0028 DE01      		movw r26,r28
  58 002a 1196      		adiw r26,1
  59               		0:
  60 002c 0190      		ld r0,Z+
  61 002e 0D92      		st X+,r0
  62 0030 8A95      		dec r24
  63 0032 01F4      		brne 0b
  92:tmk_core/common/action.c **** 
  93:tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  94:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  95:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  96:tmk_core/common/action.c ****     }
  97:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
  98:tmk_core/common/action.c ****         clear_oneshot_mods();
  99:tmk_core/common/action.c ****     }
 100:tmk_core/common/action.c **** #endif
 101:tmk_core/common/action.c **** 
 102:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 103:tmk_core/common/action.c ****     action_tapping_process(record);
  64               		.loc 1 103 5 is_stmt 1 view .LVU5
  65 0034 4981      		ldd r20,Y+1
  66               	.LVL1:
  67               		.loc 1 103 5 is_stmt 0 view .LVU6
  68 0036 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70               		.loc 1 103 5 view .LVU7
  71 0038 6B81      		ldd r22,Y+3
  72 003a 7C81      		ldd r23,Y+4
  73 003c 8D81      		ldd r24,Y+5
  74 003e 9E81      		ldd r25,Y+6
  75               	/* epilogue start */
 104:tmk_core/common/action.c **** #else
 105:tmk_core/common/action.c ****     process_record(&record);
 106:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
 107:tmk_core/common/action.c ****         dprint("processed: ");
 108:tmk_core/common/action.c ****         debug_record(record);
 109:tmk_core/common/action.c ****         dprintln();
 110:tmk_core/common/action.c ****     }
 111:tmk_core/common/action.c **** #endif
 112:tmk_core/common/action.c **** }
  76               		.loc 1 112 1 view .LVU8
  77 0040 2B96      		adiw r28,11
  78 0042 0FB6      		in __tmp_reg__,__SREG__
  79 0044 F894      		cli
  80 0046 DEBF      		out __SP_H__,r29
  81 0048 0FBE      		out __SREG__,__tmp_reg__
  82 004a CDBF      		out __SP_L__,r28
  83 004c DF91      		pop r29
  84 004e CF91      		pop r28
 103:tmk_core/common/action.c **** #else
  85               		.loc 1 103 5 view .LVU9
  86 0050 0C94 0000 		jmp action_tapping_process
  87               	.LVL3:
  88               		.cfi_endproc
  89               	.LFE106:
  91               		.section	.text.process_record_quantum,"ax",@progbits
  92               		.weak	process_record_quantum
  94               	process_record_quantum:
  95               	.LVL4:
  96               	.LFB108:
 113:tmk_core/common/action.c **** 
 114:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 115:tmk_core/common/action.c **** bool swap_hands = false;
 116:tmk_core/common/action.c **** bool swap_held  = false;
 117:tmk_core/common/action.c **** 
 118:tmk_core/common/action.c **** /** \brief Process Hand Swap
 119:tmk_core/common/action.c ****  *
 120:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 121:tmk_core/common/action.c ****  */
 122:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
 123:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
 124:tmk_core/common/action.c **** 
 125:tmk_core/common/action.c ****     keypos_t         pos     = event->key;
 126:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1 << pos.col;
 127:tmk_core/common/action.c ****     bool             do_swap = event->pressed ? swap_hands : swap_state[pos.row] & (col_bit);
 128:tmk_core/common/action.c **** 
 129:tmk_core/common/action.c ****     if (do_swap) {
 130:tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
 131:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
 132:tmk_core/common/action.c ****     } else {
 133:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 134:tmk_core/common/action.c ****     }
 135:tmk_core/common/action.c **** }
 136:tmk_core/common/action.c **** #endif
 137:tmk_core/common/action.c **** 
 138:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 139:tmk_core/common/action.c **** bool disable_action_cache = false;
 140:tmk_core/common/action.c **** 
 141:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) {
 142:tmk_core/common/action.c ****     disable_action_cache = true;
 143:tmk_core/common/action.c ****     process_record(record);
 144:tmk_core/common/action.c ****     disable_action_cache = false;
 145:tmk_core/common/action.c **** }
 146:tmk_core/common/action.c **** #else
 147:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) { process_record(record); }
 148:tmk_core/common/action.c **** #endif
 149:tmk_core/common/action.c **** 
 150:tmk_core/common/action.c **** __attribute__((weak)) bool process_record_quantum(keyrecord_t *record) { return true; }
  97               		.loc 1 150 72 is_stmt 1 view -0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103               		.loc 1 150 74 view .LVU11
 104               		.loc 1 150 1 is_stmt 0 view .LVU12
 105 0000 81E0      		ldi r24,lo8(1)
 106               	.LVL5:
 107               	/* epilogue start */
 108               		.loc 1 150 1 view .LVU13
 109 0002 0895      		ret
 110               		.cfi_endproc
 111               	.LFE108:
 113               		.section	.text.process_record_tap_hint,"ax",@progbits
 114               	.global	process_record_tap_hint
 116               	process_record_tap_hint:
 117               	.LVL6:
 118               	.LFB109:
 151:tmk_core/common/action.c **** 
 152:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 153:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 154:tmk_core/common/action.c ****  *
 155:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 156:tmk_core/common/action.c ****  */
 157:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record) {
 119               		.loc 1 157 51 is_stmt 1 view -0
 120               		.cfi_startproc
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
 158:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 125               		.loc 1 158 5 view .LVU15
 126               		.loc 1 158 23 is_stmt 0 view .LVU16
 127 0000 FC01      		movw r30,r24
 128 0002 8081      		ld r24,Z
 129 0004 9181      		ldd r25,Z+1
 130               	.LVL7:
 131               		.loc 1 158 23 view .LVU17
 132 0006 0C94 0000 		jmp layer_switch_get_action
 133               	.LVL8:
 134               		.loc 1 158 23 view .LVU18
 135               		.cfi_endproc
 136               	.LFE109:
 138               		.section	.text.register_code,"ax",@progbits
 139               	.global	register_code
 141               	register_code:
 142               	.LVL9:
 143               	.LFB112:
 159:tmk_core/common/action.c **** 
 160:tmk_core/common/action.c ****     switch (action.kind.id) {
 161:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 162:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 163:tmk_core/common/action.c ****             switch (action.swap.code) {
 164:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 165:tmk_core/common/action.c ****                 default:
 166:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 167:tmk_core/common/action.c ****                     swap_held  = true;
 168:tmk_core/common/action.c ****             }
 169:tmk_core/common/action.c ****             break;
 170:tmk_core/common/action.c **** #    endif
 171:tmk_core/common/action.c ****     }
 172:tmk_core/common/action.c **** }
 173:tmk_core/common/action.c **** #endif
 174:tmk_core/common/action.c **** 
 175:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 176:tmk_core/common/action.c ****  *
 177:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 178:tmk_core/common/action.c ****  */
 179:tmk_core/common/action.c **** void process_record(keyrecord_t *record) {
 180:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 181:tmk_core/common/action.c ****         return;
 182:tmk_core/common/action.c ****     }
 183:tmk_core/common/action.c **** 
 184:tmk_core/common/action.c ****     if (!process_record_quantum(record)) return;
 185:tmk_core/common/action.c **** 
 186:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 187:tmk_core/common/action.c ****     dprint("ACTION: ");
 188:tmk_core/common/action.c ****     debug_action(action);
 189:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 190:tmk_core/common/action.c ****     dprint(" layer_state: ");
 191:tmk_core/common/action.c ****     layer_debug();
 192:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 193:tmk_core/common/action.c ****     default_layer_debug();
 194:tmk_core/common/action.c **** #endif
 195:tmk_core/common/action.c ****     dprintln();
 196:tmk_core/common/action.c **** 
 197:tmk_core/common/action.c ****     process_action(record, action);
 198:tmk_core/common/action.c **** }
 199:tmk_core/common/action.c **** 
 200:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 201:tmk_core/common/action.c ****  *
 202:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 203:tmk_core/common/action.c ****  */
 204:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action) {
 205:tmk_core/common/action.c ****     keyevent_t event = record->event;
 206:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 207:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 208:tmk_core/common/action.c **** #endif
 209:tmk_core/common/action.c **** 
 210:tmk_core/common/action.c ****     if (event.pressed) {
 211:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 212:tmk_core/common/action.c ****         clear_weak_mods();
 213:tmk_core/common/action.c ****     }
 214:tmk_core/common/action.c **** 
 215:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 216:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 217:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 218:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 219:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 220:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 221:tmk_core/common/action.c ****     }
 222:tmk_core/common/action.c **** #endif
 223:tmk_core/common/action.c **** 
 224:tmk_core/common/action.c ****     switch (action.kind.id) {
 225:tmk_core/common/action.c ****         /* Key and Mods */
 226:tmk_core/common/action.c ****         case ACT_LMODS:
 227:tmk_core/common/action.c ****         case ACT_RMODS: {
 228:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS) ? action.key.mods : action.key.mods << 4;
 229:tmk_core/common/action.c ****             if (event.pressed) {
 230:tmk_core/common/action.c ****                 if (mods) {
 231:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 232:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 233:tmk_core/common/action.c ****                         // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSFT).
 234:tmk_core/common/action.c ****                         // Same applies for some keys like KC_MEH which are declared as MEH(KC_NO).
 235:tmk_core/common/action.c ****                         add_mods(mods);
 236:tmk_core/common/action.c ****                     } else {
 237:tmk_core/common/action.c ****                         add_weak_mods(mods);
 238:tmk_core/common/action.c ****                     }
 239:tmk_core/common/action.c ****                     send_keyboard_report();
 240:tmk_core/common/action.c ****                 }
 241:tmk_core/common/action.c ****                 register_code(action.key.code);
 242:tmk_core/common/action.c ****             } else {
 243:tmk_core/common/action.c ****                 unregister_code(action.key.code);
 244:tmk_core/common/action.c ****                 if (mods) {
 245:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 246:tmk_core/common/action.c ****                         del_mods(mods);
 247:tmk_core/common/action.c ****                     } else {
 248:tmk_core/common/action.c ****                         del_weak_mods(mods);
 249:tmk_core/common/action.c ****                     }
 250:tmk_core/common/action.c ****                     send_keyboard_report();
 251:tmk_core/common/action.c ****                 }
 252:tmk_core/common/action.c ****             }
 253:tmk_core/common/action.c ****         } break;
 254:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 255:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 256:tmk_core/common/action.c ****         case ACT_RMODS_TAP: {
 257:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ? action.key.mods : action.key.mods <<
 258:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 259:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 260:tmk_core/common/action.c ****                 case MODS_ONESHOT:
 261:tmk_core/common/action.c ****                     // Oneshot modifier
 262:tmk_core/common/action.c ****                     if (event.pressed) {
 263:tmk_core/common/action.c ****                         if (tap_count == 0) {
 264:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 265:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 266:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 267:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 268:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 269:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 270:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 271:tmk_core/common/action.c ****                             dprint("MODS_TAP: Toggling oneshot");
 272:tmk_core/common/action.c ****                             clear_oneshot_mods();
 273:tmk_core/common/action.c ****                             set_oneshot_locked_mods(mods);
 274:tmk_core/common/action.c ****                             register_mods(mods);
 275:tmk_core/common/action.c **** #        endif
 276:tmk_core/common/action.c ****                         } else {
 277:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 278:tmk_core/common/action.c ****                         }
 279:tmk_core/common/action.c ****                     } else {
 280:tmk_core/common/action.c ****                         if (tap_count == 0) {
 281:tmk_core/common/action.c ****                             clear_oneshot_mods();
 282:tmk_core/common/action.c ****                             unregister_mods(mods);
 283:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 284:tmk_core/common/action.c ****                             // Retain Oneshot mods
 285:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 286:tmk_core/common/action.c ****                             if (mods & get_mods()) {
 287:tmk_core/common/action.c ****                                 clear_oneshot_locked_mods();
 288:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 289:tmk_core/common/action.c ****                                 unregister_mods(mods);
 290:tmk_core/common/action.c ****                             }
 291:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 292:tmk_core/common/action.c ****                             // Toggle Oneshot Layer
 293:tmk_core/common/action.c **** #        endif
 294:tmk_core/common/action.c ****                         } else {
 295:tmk_core/common/action.c ****                             clear_oneshot_mods();
 296:tmk_core/common/action.c ****                             unregister_mods(mods);
 297:tmk_core/common/action.c ****                         }
 298:tmk_core/common/action.c ****                     }
 299:tmk_core/common/action.c ****                     break;
 300:tmk_core/common/action.c **** #    endif
 301:tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 302:tmk_core/common/action.c ****                     if (event.pressed) {
 303:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 304:tmk_core/common/action.c ****                             register_mods(mods);
 305:tmk_core/common/action.c ****                         }
 306:tmk_core/common/action.c ****                     } else {
 307:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 308:tmk_core/common/action.c ****                             unregister_mods(mods);
 309:tmk_core/common/action.c ****                         }
 310:tmk_core/common/action.c ****                     }
 311:tmk_core/common/action.c ****                     break;
 312:tmk_core/common/action.c ****                 default:
 313:tmk_core/common/action.c ****                     if (event.pressed) {
 314:tmk_core/common/action.c ****                         if (tap_count > 0) {
 315:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 316:tmk_core/common/action.c ****                             if (
 317:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 318:tmk_core/common/action.c ****                                 !get_ignore_mod_tap_interrupt(get_event_keycode(record->event)) &&
 319:tmk_core/common/action.c **** #        endif
 320:tmk_core/common/action.c ****                                 record->tap.interrupted) {
 321:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 322:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 323:tmk_core/common/action.c ****                                 record->tap.count = 0;
 324:tmk_core/common/action.c ****                                 register_mods(mods);
 325:tmk_core/common/action.c ****                             } else
 326:tmk_core/common/action.c **** #    endif
 327:tmk_core/common/action.c ****                             {
 328:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: register_code\n");
 329:tmk_core/common/action.c ****                                 register_code(action.key.code);
 330:tmk_core/common/action.c ****                             }
 331:tmk_core/common/action.c ****                         } else {
 332:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 333:tmk_core/common/action.c ****                             register_mods(mods);
 334:tmk_core/common/action.c ****                         }
 335:tmk_core/common/action.c ****                     } else {
 336:tmk_core/common/action.c ****                         if (tap_count > 0) {
 337:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 338:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 339:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 340:tmk_core/common/action.c ****                             }
 341:tmk_core/common/action.c ****                             unregister_code(action.key.code);
 342:tmk_core/common/action.c ****                         } else {
 343:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 344:tmk_core/common/action.c ****                             unregister_mods(mods);
 345:tmk_core/common/action.c ****                         }
 346:tmk_core/common/action.c ****                     }
 347:tmk_core/common/action.c ****                     break;
 348:tmk_core/common/action.c ****             }
 349:tmk_core/common/action.c ****         } break;
 350:tmk_core/common/action.c **** #endif
 351:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 352:tmk_core/common/action.c ****         /* other HID usage */
 353:tmk_core/common/action.c ****         case ACT_USAGE:
 354:tmk_core/common/action.c ****             switch (action.usage.page) {
 355:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 356:tmk_core/common/action.c ****                     if (event.pressed) {
 357:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 358:tmk_core/common/action.c ****                     } else {
 359:tmk_core/common/action.c ****                         host_system_send(0);
 360:tmk_core/common/action.c ****                     }
 361:tmk_core/common/action.c ****                     break;
 362:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 363:tmk_core/common/action.c ****                     if (event.pressed) {
 364:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 365:tmk_core/common/action.c ****                     } else {
 366:tmk_core/common/action.c ****                         host_consumer_send(0);
 367:tmk_core/common/action.c ****                     }
 368:tmk_core/common/action.c ****                     break;
 369:tmk_core/common/action.c ****             }
 370:tmk_core/common/action.c ****             break;
 371:tmk_core/common/action.c **** #endif
 372:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 373:tmk_core/common/action.c ****         /* Mouse key */
 374:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 375:tmk_core/common/action.c ****             if (event.pressed) {
 376:tmk_core/common/action.c ****                 switch (action.key.code) {
 377:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 378:tmk_core/common/action.c ****                         tp_buttons |= (1 << 0);
 379:tmk_core/common/action.c ****                         break;
 380:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 381:tmk_core/common/action.c ****                         tp_buttons |= (1 << 1);
 382:tmk_core/common/action.c ****                         break;
 383:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 384:tmk_core/common/action.c ****                         tp_buttons |= (1 << 2);
 385:tmk_core/common/action.c ****                         break;
 386:tmk_core/common/action.c ****                     default:
 387:tmk_core/common/action.c ****                         break;
 388:tmk_core/common/action.c ****                 }
 389:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 390:tmk_core/common/action.c ****                 mousekey_send();
 391:tmk_core/common/action.c ****             } else {
 392:tmk_core/common/action.c ****                 switch (action.key.code) {
 393:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 394:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 0);
 395:tmk_core/common/action.c ****                         break;
 396:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 397:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 1);
 398:tmk_core/common/action.c ****                         break;
 399:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 400:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 2);
 401:tmk_core/common/action.c ****                         break;
 402:tmk_core/common/action.c ****                     default:
 403:tmk_core/common/action.c ****                         break;
 404:tmk_core/common/action.c ****                 }
 405:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 406:tmk_core/common/action.c ****                 mousekey_send();
 407:tmk_core/common/action.c ****             }
 408:tmk_core/common/action.c ****             break;
 409:tmk_core/common/action.c **** #endif
 410:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 411:tmk_core/common/action.c ****         case ACT_LAYER:
 412:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 413:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 414:tmk_core/common/action.c ****                 if (!event.pressed) {
 415:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 416:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 417:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 418:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 419:tmk_core/common/action.c ****                         case OP_BIT_AND:
 420:tmk_core/common/action.c ****                             default_layer_and(bits | mask);
 421:tmk_core/common/action.c ****                             break;
 422:tmk_core/common/action.c ****                         case OP_BIT_OR:
 423:tmk_core/common/action.c ****                             default_layer_or(bits | mask);
 424:tmk_core/common/action.c ****                             break;
 425:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 426:tmk_core/common/action.c ****                             default_layer_xor(bits | mask);
 427:tmk_core/common/action.c ****                             break;
 428:tmk_core/common/action.c ****                         case OP_BIT_SET:
 429:tmk_core/common/action.c ****                             default_layer_set(bits | mask);
 430:tmk_core/common/action.c ****                             break;
 431:tmk_core/common/action.c ****                     }
 432:tmk_core/common/action.c ****                 }
 433:tmk_core/common/action.c ****             } else {
 434:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 435:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) : (action.layer_bitop.on & O
 436:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 437:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 438:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 439:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 440:tmk_core/common/action.c ****                         case OP_BIT_AND:
 441:tmk_core/common/action.c ****                             layer_and(bits | mask);
 442:tmk_core/common/action.c ****                             break;
 443:tmk_core/common/action.c ****                         case OP_BIT_OR:
 444:tmk_core/common/action.c ****                             layer_or(bits | mask);
 445:tmk_core/common/action.c ****                             break;
 446:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 447:tmk_core/common/action.c ****                             layer_xor(bits | mask);
 448:tmk_core/common/action.c ****                             break;
 449:tmk_core/common/action.c ****                         case OP_BIT_SET:
 450:tmk_core/common/action.c ****                             layer_state_set(bits | mask);
 451:tmk_core/common/action.c ****                             break;
 452:tmk_core/common/action.c ****                     }
 453:tmk_core/common/action.c ****                 }
 454:tmk_core/common/action.c ****             }
 455:tmk_core/common/action.c ****             break;
 456:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 457:tmk_core/common/action.c ****             if (event.pressed) {
 458:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 459:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 460:tmk_core/common/action.c ****             } else {
 461:tmk_core/common/action.c ****                 unregister_mods(action.layer_mods.mods);
 462:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 463:tmk_core/common/action.c ****             }
 464:tmk_core/common/action.c ****             break;
 465:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 466:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 467:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 468:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 469:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 470:tmk_core/common/action.c ****                     /* tap toggle */
 471:tmk_core/common/action.c ****                     if (event.pressed) {
 472:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 473:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 474:tmk_core/common/action.c ****                         }
 475:tmk_core/common/action.c ****                     } else {
 476:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 477:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 478:tmk_core/common/action.c ****                         }
 479:tmk_core/common/action.c ****                     }
 480:tmk_core/common/action.c ****                     break;
 481:tmk_core/common/action.c ****                 case OP_ON_OFF:
 482:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) : layer_off(action.layer_tap.val
 483:tmk_core/common/action.c ****                     break;
 484:tmk_core/common/action.c ****                 case OP_OFF_ON:
 485:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) : layer_on(action.layer_tap.val
 486:tmk_core/common/action.c ****                     break;
 487:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 488:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) : layer_clear();
 489:tmk_core/common/action.c ****                     break;
 490:tmk_core/common/action.c **** #        ifndef NO_ACTION_ONESHOT
 491:tmk_core/common/action.c ****                 case OP_ONESHOT:
 492:tmk_core/common/action.c ****                     // Oneshot modifier
 493:tmk_core/common/action.c **** #            if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 494:tmk_core/common/action.c ****                     do_release_oneshot = false;
 495:tmk_core/common/action.c ****                     if (event.pressed) {
 496:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 497:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 498:tmk_core/common/action.c ****                             reset_oneshot_layer();
 499:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 500:tmk_core/common/action.c ****                             break;
 501:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 502:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 503:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 504:tmk_core/common/action.c ****                         }
 505:tmk_core/common/action.c ****                     } else {
 506:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 507:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 508:tmk_core/common/action.c ****                             reset_oneshot_layer();
 509:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 510:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 511:tmk_core/common/action.c ****                         } else {
 512:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 513:tmk_core/common/action.c ****                         }
 514:tmk_core/common/action.c ****                     }
 515:tmk_core/common/action.c **** #            else
 516:tmk_core/common/action.c ****                     if (event.pressed) {
 517:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 518:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 519:tmk_core/common/action.c ****                     } else {
 520:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 521:tmk_core/common/action.c ****                         if (tap_count > 1) {
 522:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 523:tmk_core/common/action.c ****                         }
 524:tmk_core/common/action.c ****                     }
 525:tmk_core/common/action.c **** #            endif
 526:tmk_core/common/action.c ****                     break;
 527:tmk_core/common/action.c **** #        endif
 528:tmk_core/common/action.c ****                 default:
 529:tmk_core/common/action.c ****                     /* tap key */
 530:tmk_core/common/action.c ****                     if (event.pressed) {
 531:tmk_core/common/action.c ****                         if (tap_count > 0) {
 532:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 533:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 534:tmk_core/common/action.c ****                         } else {
 535:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 536:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 537:tmk_core/common/action.c ****                         }
 538:tmk_core/common/action.c ****                     } else {
 539:tmk_core/common/action.c ****                         if (tap_count > 0) {
 540:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 541:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 542:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 543:tmk_core/common/action.c ****                             } else {
 544:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 545:tmk_core/common/action.c ****                             }
 546:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 547:tmk_core/common/action.c ****                         } else {
 548:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 549:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 550:tmk_core/common/action.c ****                         }
 551:tmk_core/common/action.c ****                     }
 552:tmk_core/common/action.c ****                     break;
 553:tmk_core/common/action.c ****             }
 554:tmk_core/common/action.c ****             break;
 555:tmk_core/common/action.c **** #    endif
 556:tmk_core/common/action.c **** #endif
 557:tmk_core/common/action.c ****             /* Extentions */
 558:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 559:tmk_core/common/action.c ****         case ACT_MACRO:
 560:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 561:tmk_core/common/action.c ****             break;
 562:tmk_core/common/action.c **** #endif
 563:tmk_core/common/action.c **** #if defined(BACKLIGHT_ENABLE) || defined(LED_MATRIX_ENABLE)
 564:tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 565:tmk_core/common/action.c ****             if (!event.pressed) {
 566:tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 567:tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 568:tmk_core/common/action.c ****                         backlight_increase();
 569:tmk_core/common/action.c ****                         break;
 570:tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 571:tmk_core/common/action.c ****                         backlight_decrease();
 572:tmk_core/common/action.c ****                         break;
 573:tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 574:tmk_core/common/action.c ****                         backlight_toggle();
 575:tmk_core/common/action.c ****                         break;
 576:tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 577:tmk_core/common/action.c ****                         backlight_step();
 578:tmk_core/common/action.c ****                         break;
 579:tmk_core/common/action.c ****                     case BACKLIGHT_ON:
 580:tmk_core/common/action.c ****                         backlight_level(BACKLIGHT_LEVELS);
 581:tmk_core/common/action.c ****                         break;
 582:tmk_core/common/action.c ****                     case BACKLIGHT_OFF:
 583:tmk_core/common/action.c ****                         backlight_level(0);
 584:tmk_core/common/action.c ****                         break;
 585:tmk_core/common/action.c ****                 }
 586:tmk_core/common/action.c ****             }
 587:tmk_core/common/action.c ****             break;
 588:tmk_core/common/action.c **** #endif
 589:tmk_core/common/action.c ****         case ACT_COMMAND:
 590:tmk_core/common/action.c ****             break;
 591:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 592:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 593:tmk_core/common/action.c ****             switch (action.swap.code) {
 594:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 595:tmk_core/common/action.c ****                     if (event.pressed) {
 596:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 597:tmk_core/common/action.c ****                     }
 598:tmk_core/common/action.c ****                     break;
 599:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 600:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 601:tmk_core/common/action.c ****                     break;
 602:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 603:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 604:tmk_core/common/action.c ****                     break;
 605:tmk_core/common/action.c ****                 case OP_SH_ON:
 606:tmk_core/common/action.c ****                     if (!event.pressed) {
 607:tmk_core/common/action.c ****                         swap_hands = true;
 608:tmk_core/common/action.c ****                     }
 609:tmk_core/common/action.c ****                     break;
 610:tmk_core/common/action.c ****                 case OP_SH_OFF:
 611:tmk_core/common/action.c ****                     if (!event.pressed) {
 612:tmk_core/common/action.c ****                         swap_hands = false;
 613:tmk_core/common/action.c ****                     }
 614:tmk_core/common/action.c ****                     break;
 615:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 616:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 617:tmk_core/common/action.c ****                     /* tap toggle */
 618:tmk_core/common/action.c **** 
 619:tmk_core/common/action.c ****                     if (event.pressed) {
 620:tmk_core/common/action.c ****                         if (swap_held) {
 621:tmk_core/common/action.c ****                             swap_held = false;
 622:tmk_core/common/action.c ****                         } else {
 623:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 624:tmk_core/common/action.c ****                         }
 625:tmk_core/common/action.c ****                     } else {
 626:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 627:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 628:tmk_core/common/action.c ****                         }
 629:tmk_core/common/action.c ****                     }
 630:tmk_core/common/action.c ****                     break;
 631:tmk_core/common/action.c ****                 default:
 632:tmk_core/common/action.c ****                     /* tap key */
 633:tmk_core/common/action.c ****                     if (tap_count > 0) {
 634:tmk_core/common/action.c ****                         if (swap_held) {
 635:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 636:tmk_core/common/action.c ****                             swap_held  = false;
 637:tmk_core/common/action.c ****                         }
 638:tmk_core/common/action.c ****                         if (event.pressed) {
 639:tmk_core/common/action.c ****                             register_code(action.swap.code);
 640:tmk_core/common/action.c ****                         } else {
 641:tmk_core/common/action.c ****                             wait_ms(TAP_CODE_DELAY);
 642:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 643:tmk_core/common/action.c ****                             *record = (keyrecord_t){};  // hack: reset tap mode
 644:tmk_core/common/action.c ****                         }
 645:tmk_core/common/action.c ****                     } else {
 646:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 647:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 648:tmk_core/common/action.c ****                             swap_held  = false;
 649:tmk_core/common/action.c ****                         }
 650:tmk_core/common/action.c ****                     }
 651:tmk_core/common/action.c **** #    endif
 652:tmk_core/common/action.c ****             }
 653:tmk_core/common/action.c **** #endif
 654:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 655:tmk_core/common/action.c ****         case ACT_FUNCTION:
 656:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 657:tmk_core/common/action.c ****             break;
 658:tmk_core/common/action.c **** #endif
 659:tmk_core/common/action.c ****         default:
 660:tmk_core/common/action.c ****             break;
 661:tmk_core/common/action.c ****     }
 662:tmk_core/common/action.c **** 
 663:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 664:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 665:tmk_core/common/action.c ****     switch (action.kind.id) {
 666:tmk_core/common/action.c ****         case ACT_LAYER:
 667:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 668:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 669:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 670:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 671:tmk_core/common/action.c **** #    endif
 672:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 673:tmk_core/common/action.c ****             break;
 674:tmk_core/common/action.c ****         default:
 675:tmk_core/common/action.c ****             break;
 676:tmk_core/common/action.c ****     }
 677:tmk_core/common/action.c **** #endif
 678:tmk_core/common/action.c **** 
 679:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 680:tmk_core/common/action.c **** #    ifdef RETRO_TAPPING
 681:tmk_core/common/action.c ****     if (!is_tap_action(action)) {
 682:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 683:tmk_core/common/action.c ****     } else {
 684:tmk_core/common/action.c ****         if (event.pressed) {
 685:tmk_core/common/action.c ****             if (tap_count > 0) {
 686:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 687:tmk_core/common/action.c ****             } else {
 688:tmk_core/common/action.c ****             }
 689:tmk_core/common/action.c ****         } else {
 690:tmk_core/common/action.c ****             if (tap_count > 0) {
 691:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 692:tmk_core/common/action.c ****             } else {
 693:tmk_core/common/action.c ****                 if (retro_tapping_counter == 2) {
 694:tmk_core/common/action.c ****                     tap_code(action.layer_tap.code);
 695:tmk_core/common/action.c ****                 }
 696:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 697:tmk_core/common/action.c ****             }
 698:tmk_core/common/action.c ****         }
 699:tmk_core/common/action.c ****     }
 700:tmk_core/common/action.c **** #    endif
 701:tmk_core/common/action.c **** #endif
 702:tmk_core/common/action.c **** 
 703:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 704:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 705:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 706:tmk_core/common/action.c ****      */
 707:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED)) {
 708:tmk_core/common/action.c ****         record->event.pressed = false;
 709:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 710:tmk_core/common/action.c ****         process_record(record);
 711:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 712:tmk_core/common/action.c ****     }
 713:tmk_core/common/action.c **** #endif
 714:tmk_core/common/action.c **** }
 715:tmk_core/common/action.c **** 
 716:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 717:tmk_core/common/action.c ****  *
 718:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 719:tmk_core/common/action.c ****  */
 720:tmk_core/common/action.c **** void register_code(uint8_t code) {
 144               		.loc 1 720 34 is_stmt 1 view -0
 145               		.cfi_startproc
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 0 */
 149               	.L__stack_usage = 0
 721:tmk_core/common/action.c ****     if (code == KC_NO) {
 150               		.loc 1 721 5 view .LVU20
 151               		.loc 1 721 8 is_stmt 0 view .LVU21
 152 0000 8823      		tst r24
 153 0002 01F4      		brne .+2
 154 0004 00C0      		rjmp .L4
 722:tmk_core/common/action.c ****         return;
 723:tmk_core/common/action.c ****     }
 724:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 725:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 155               		.loc 1 725 10 is_stmt 1 view .LVU22
 156               		.loc 1 725 13 is_stmt 0 view .LVU23
 157 0006 8238      		cpi r24,lo8(-126)
 158 0008 01F4      		brne .L7
 726:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 727:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 728:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK)) return;
 159               		.loc 1 728 9 is_stmt 1 view .LVU24
 160               		.loc 1 728 13 is_stmt 0 view .LVU25
 161 000a 0E94 0000 		call host_keyboard_leds
 162               	.LVL10:
 163               		.loc 1 728 12 view .LVU26
 164 000e 81FD      		sbrc r24,1
 165 0010 00C0      		rjmp .L4
 729:tmk_core/common/action.c **** #    endif
 730:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 166               		.loc 1 730 9 is_stmt 1 view .LVU27
 167 0012 89E3      		ldi r24,lo8(57)
 168 0014 0E94 0000 		call add_key
 169               	.LVL11:
 731:tmk_core/common/action.c ****         send_keyboard_report();
 170               		.loc 1 731 9 view .LVU28
 171 0018 0E94 0000 		call send_keyboard_report
 172               	.LVL12:
 732:tmk_core/common/action.c ****         wait_ms(100);
 173               		.loc 1 732 9 view .LVU29
 174               	.LBB22:
 175               	.LBI22:
 176               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
 177               		.loc 2 166 1 view .LVU30
 178               	.LBB23:
 167:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 179               		.loc 2 168 2 view .LVU31
 169:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 180               		.loc 2 172 2 view .LVU32
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 181               		.loc 2 173 2 view .LVU33
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 182               		.loc 2 174 2 view .LVU34
 175:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 183               		.loc 2 184 3 view .LVU35
 185:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 184               		.loc 2 187 2 view .LVU36
 185 001c 2FEF      		ldi r18,lo8(319999)
 186 001e 81EE      		ldi r24,hi8(319999)
 187 0020 94E0      		ldi r25,hlo8(319999)
 188 0022 2150      	1:	subi r18,1
 189 0024 8040      		sbci r24,0
 190 0026 9040      		sbci r25,0
 191 0028 01F4      		brne 1b
 192 002a 00C0      		rjmp .
 193 002c 0000      		nop
 194               	.LVL13:
 195               		.loc 2 187 2 is_stmt 0 view .LVU37
 196               	.LBE23:
 197               	.LBE22:
 733:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 198               		.loc 1 733 9 is_stmt 1 view .LVU38
 199 002e 89E3      		ldi r24,lo8(57)
 200               	.L42:
 734:tmk_core/common/action.c ****         send_keyboard_report();
 735:tmk_core/common/action.c ****     }
 736:tmk_core/common/action.c **** 
 737:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 738:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 739:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_NUM_LOCK)) return;
 740:tmk_core/common/action.c **** #    endif
 741:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 742:tmk_core/common/action.c ****         send_keyboard_report();
 743:tmk_core/common/action.c ****         wait_ms(100);
 744:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 201               		.loc 1 744 9 is_stmt 0 view .LVU39
 202 0030 0E94 0000 		call del_key
 203               	.LVL14:
 204               	.L43:
 745:tmk_core/common/action.c ****         send_keyboard_report();
 205               		.loc 1 745 9 is_stmt 1 view .LVU40
 206 0034 0C94 0000 		jmp send_keyboard_report
 207               	.LVL15:
 208               	.L7:
 737:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 209               		.loc 1 737 10 view .LVU41
 737:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 210               		.loc 1 737 13 is_stmt 0 view .LVU42
 211 0038 8338      		cpi r24,lo8(-125)
 212 003a 01F4      		brne .L9
 739:tmk_core/common/action.c **** #    endif
 213               		.loc 1 739 9 is_stmt 1 view .LVU43
 739:tmk_core/common/action.c **** #    endif
 214               		.loc 1 739 13 is_stmt 0 view .LVU44
 215 003c 0E94 0000 		call host_keyboard_leds
 216               	.LVL16:
 739:tmk_core/common/action.c **** #    endif
 217               		.loc 1 739 12 view .LVU45
 218 0040 80FD      		sbrc r24,0
 219 0042 00C0      		rjmp .L4
 741:tmk_core/common/action.c ****         send_keyboard_report();
 220               		.loc 1 741 9 is_stmt 1 view .LVU46
 221 0044 83E5      		ldi r24,lo8(83)
 222 0046 0E94 0000 		call add_key
 223               	.LVL17:
 742:tmk_core/common/action.c ****         wait_ms(100);
 224               		.loc 1 742 9 view .LVU47
 225 004a 0E94 0000 		call send_keyboard_report
 226               	.LVL18:
 743:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 227               		.loc 1 743 9 view .LVU48
 228               	.LBB24:
 229               	.LBI24:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 230               		.loc 2 166 1 view .LVU49
 231               	.LBB25:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 232               		.loc 2 168 2 view .LVU50
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233               		.loc 2 172 2 view .LVU51
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 234               		.loc 2 173 2 view .LVU52
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 235               		.loc 2 174 2 view .LVU53
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 236               		.loc 2 184 3 view .LVU54
 237               		.loc 2 187 2 view .LVU55
 238 004e 2FEF      		ldi r18,lo8(319999)
 239 0050 81EE      		ldi r24,hi8(319999)
 240 0052 94E0      		ldi r25,hlo8(319999)
 241 0054 2150      	1:	subi r18,1
 242 0056 8040      		sbci r24,0
 243 0058 9040      		sbci r25,0
 244 005a 01F4      		brne 1b
 245 005c 00C0      		rjmp .
 246 005e 0000      		nop
 247               	.LVL19:
 248               		.loc 2 187 2 is_stmt 0 view .LVU56
 249               	.LBE25:
 250               	.LBE24:
 744:tmk_core/common/action.c ****         send_keyboard_report();
 251               		.loc 1 744 9 is_stmt 1 view .LVU57
 252 0060 83E5      		ldi r24,lo8(83)
 253 0062 00C0      		rjmp .L42
 254               	.LVL20:
 255               	.L9:
 746:tmk_core/common/action.c ****     }
 747:tmk_core/common/action.c **** 
 748:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 256               		.loc 1 748 10 view .LVU58
 257               		.loc 1 748 13 is_stmt 0 view .LVU59
 258 0064 8438      		cpi r24,lo8(-124)
 259 0066 01F4      		brne .L10
 749:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 750:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK)) return;
 260               		.loc 1 750 9 is_stmt 1 view .LVU60
 261               		.loc 1 750 13 is_stmt 0 view .LVU61
 262 0068 0E94 0000 		call host_keyboard_leds
 263               	.LVL21:
 264               		.loc 1 750 12 view .LVU62
 265 006c 82FD      		sbrc r24,2
 266 006e 00C0      		rjmp .L4
 751:tmk_core/common/action.c **** #    endif
 752:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 267               		.loc 1 752 9 is_stmt 1 view .LVU63
 268 0070 87E4      		ldi r24,lo8(71)
 269 0072 0E94 0000 		call add_key
 270               	.LVL22:
 753:tmk_core/common/action.c ****         send_keyboard_report();
 271               		.loc 1 753 9 view .LVU64
 272 0076 0E94 0000 		call send_keyboard_report
 273               	.LVL23:
 754:tmk_core/common/action.c ****         wait_ms(100);
 274               		.loc 1 754 9 view .LVU65
 275               	.LBB26:
 276               	.LBI26:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 277               		.loc 2 166 1 view .LVU66
 278               	.LBB27:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 279               		.loc 2 168 2 view .LVU67
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 280               		.loc 2 172 2 view .LVU68
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 281               		.loc 2 173 2 view .LVU69
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 282               		.loc 2 174 2 view .LVU70
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 283               		.loc 2 184 3 view .LVU71
 284               		.loc 2 187 2 view .LVU72
 285 007a 2FEF      		ldi r18,lo8(319999)
 286 007c 81EE      		ldi r24,hi8(319999)
 287 007e 94E0      		ldi r25,hlo8(319999)
 288 0080 2150      	1:	subi r18,1
 289 0082 8040      		sbci r24,0
 290 0084 9040      		sbci r25,0
 291 0086 01F4      		brne 1b
 292 0088 00C0      		rjmp .
 293 008a 0000      		nop
 294               	.LVL24:
 295               		.loc 2 187 2 is_stmt 0 view .LVU73
 296               	.LBE27:
 297               	.LBE26:
 755:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 298               		.loc 1 755 9 is_stmt 1 view .LVU74
 299 008c 87E4      		ldi r24,lo8(71)
 300 008e 00C0      		rjmp .L42
 301               	.LVL25:
 302               	.L10:
 756:tmk_core/common/action.c ****         send_keyboard_report();
 757:tmk_core/common/action.c ****     }
 758:tmk_core/common/action.c **** #endif
 759:tmk_core/common/action.c **** 
 760:tmk_core/common/action.c ****     else if
 303               		.loc 1 760 10 view .LVU75
 761:tmk_core/common/action.c ****         IS_KEY(code) {
 304               		.loc 1 761 9 is_stmt 0 view .LVU76
 305 0090 9CEF      		ldi r25,lo8(-4)
 306 0092 980F      		add r25,r24
 307 0094 913A      		cpi r25,lo8(-95)
 308 0096 00F4      		brsh .L11
 762:tmk_core/common/action.c ****             // TODO: should push command_proc out of this block?
 763:tmk_core/common/action.c ****             if (command_proc(code)) return;
 309               		.loc 1 763 13 is_stmt 1 view .LVU77
 764:tmk_core/common/action.c **** 
 765:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 766:tmk_core/common/action.c **** /* TODO: remove
 767:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 768:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 769:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 770:tmk_core/common/action.c **** 
 771:tmk_core/common/action.c ****             add_key(code);
 772:tmk_core/common/action.c ****             send_keyboard_report();
 773:tmk_core/common/action.c **** 
 774:tmk_core/common/action.c ****             set_mods(tmp_mods);
 775:tmk_core/common/action.c ****             send_keyboard_report();
 776:tmk_core/common/action.c ****             oneshot_cancel();
 777:tmk_core/common/action.c ****         } else
 778:tmk_core/common/action.c **** */
 779:tmk_core/common/action.c **** #endif
 780:tmk_core/common/action.c ****             {
 781:tmk_core/common/action.c ****                 add_key(code);
 310               		.loc 1 781 17 view .LVU78
 311 0098 0E94 0000 		call add_key
 312               	.LVL26:
 782:tmk_core/common/action.c ****                 send_keyboard_report();
 313               		.loc 1 782 17 view .LVU79
 314 009c 00C0      		rjmp .L43
 315               	.LVL27:
 316               	.L11:
 783:tmk_core/common/action.c ****             }
 784:tmk_core/common/action.c ****         }
 785:tmk_core/common/action.c ****     else if
 317               		.loc 1 785 10 view .LVU80
 786:tmk_core/common/action.c ****         IS_MOD(code) {
 318               		.loc 1 786 9 is_stmt 0 view .LVU81
 319 009e 90E2      		ldi r25,lo8(32)
 320 00a0 980F      		add r25,r24
 321 00a2 9830      		cpi r25,lo8(8)
 322 00a4 00F4      		brsh .L12
 787:tmk_core/common/action.c ****             add_mods(MOD_BIT(code));
 323               		.loc 1 787 13 is_stmt 1 view .LVU82
 324               		.loc 1 787 22 is_stmt 0 view .LVU83
 325 00a6 8770      		andi r24,lo8(7)
 326               	.LVL28:
 327               		.loc 1 787 13 view .LVU84
 328 00a8 91E0      		ldi r25,lo8(1)
 329 00aa 00C0      		rjmp 2f
 330               		1:
 331 00ac 990F      		lsl r25
 332               		2:
 333 00ae 8A95      		dec r24
 334 00b0 02F4      		brpl 1b
 335 00b2 892F      		mov r24,r25
 336 00b4 0E94 0000 		call add_mods
 337               	.LVL29:
 788:tmk_core/common/action.c ****             send_keyboard_report();
 338               		.loc 1 788 13 is_stmt 1 view .LVU85
 339 00b8 00C0      		rjmp .L43
 340               	.LVL30:
 341               	.L12:
 789:tmk_core/common/action.c ****         }
 790:tmk_core/common/action.c ****     else if
 342               		.loc 1 790 10 view .LVU86
 791:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(KEYCODE2SYSTEM(code)); }
 343               		.loc 1 791 9 is_stmt 0 view .LVU87
 344 00ba 9BE5      		ldi r25,lo8(91)
 345 00bc 980F      		add r25,r24
 346 00be 9330      		cpi r25,lo8(3)
 347 00c0 00F4      		brsh .L13
 348               		.loc 1 791 27 is_stmt 1 discriminator 1 view .LVU88
 349 00c2 853A      		cpi r24,lo8(-91)
 350 00c4 01F0      		breq .L17
 351               		.loc 1 791 44 is_stmt 0 discriminator 2 view .LVU89
 352 00c6 863A      		cpi r24,lo8(-90)
 353 00c8 01F0      		breq .L18
 354               		.loc 1 791 44 view .LVU90
 355 00ca 83E8      		ldi r24,lo8(-125)
 356 00cc 90E0      		ldi r25,0
 357               	.LVL31:
 358               	.L14:
 359               		.loc 1 791 27 discriminator 13 view .LVU91
 360 00ce 0C94 0000 		jmp host_system_send
 361               	.LVL32:
 362               	.L17:
 363               		.loc 1 791 27 view .LVU92
 364 00d2 81E8      		ldi r24,lo8(-127)
 365 00d4 90E0      		ldi r25,0
 366               	.LVL33:
 367               		.loc 1 791 27 view .LVU93
 368 00d6 00C0      		rjmp .L14
 369               	.LVL34:
 370               	.L18:
 371               		.loc 1 791 44 view .LVU94
 372 00d8 82E8      		ldi r24,lo8(-126)
 373 00da 90E0      		ldi r25,0
 374               	.LVL35:
 375               		.loc 1 791 44 view .LVU95
 376 00dc 00C0      		rjmp .L14
 377               	.LVL36:
 378               	.L13:
 792:tmk_core/common/action.c ****     else if
 379               		.loc 1 792 10 is_stmt 1 view .LVU96
 793:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(KEYCODE2CONSUMER(code)); }
 380               		.loc 1 793 9 is_stmt 0 view .LVU97
 381 00de 98E5      		ldi r25,lo8(88)
 382 00e0 980F      		add r25,r24
 383 00e2 9731      		cpi r25,lo8(23)
 384 00e4 00F0      		brlo .+2
 385 00e6 00C0      		rjmp .L15
 386               		.loc 1 793 29 is_stmt 1 discriminator 1 view .LVU98
 387 00e8 883A      		cpi r24,lo8(-88)
 388 00ea 01F4      		brne .+2
 389 00ec 00C0      		rjmp .L19
 390               		.loc 1 793 48 is_stmt 0 discriminator 2 view .LVU99
 391 00ee 893A      		cpi r24,lo8(-87)
 392 00f0 01F4      		brne .+2
 393 00f2 00C0      		rjmp .L20
 394               		.loc 1 793 48 discriminator 4 view .LVU100
 395 00f4 8A3A      		cpi r24,lo8(-86)
 396 00f6 01F4      		brne .+2
 397 00f8 00C0      		rjmp .L21
 398               		.loc 1 793 48 discriminator 6 view .LVU101
 399 00fa 8B3A      		cpi r24,lo8(-85)
 400 00fc 01F4      		brne .+2
 401 00fe 00C0      		rjmp .L22
 402               		.loc 1 793 48 discriminator 8 view .LVU102
 403 0100 8C3A      		cpi r24,lo8(-84)
 404 0102 01F4      		brne .+2
 405 0104 00C0      		rjmp .L23
 406               		.loc 1 793 48 discriminator 10 view .LVU103
 407 0106 8B3B      		cpi r24,lo8(-69)
 408 0108 01F4      		brne .+2
 409 010a 00C0      		rjmp .L24
 410               		.loc 1 793 48 discriminator 12 view .LVU104
 411 010c 8C3B      		cpi r24,lo8(-68)
 412 010e 01F4      		brne .+2
 413 0110 00C0      		rjmp .L25
 414               		.loc 1 793 48 discriminator 14 view .LVU105
 415 0112 8D3A      		cpi r24,lo8(-83)
 416 0114 01F4      		brne .+2
 417 0116 00C0      		rjmp .L26
 418               		.loc 1 793 48 discriminator 16 view .LVU106
 419 0118 803B      		cpi r24,lo8(-80)
 420 011a 01F4      		brne .+2
 421 011c 00C0      		rjmp .L27
 422               		.loc 1 793 48 discriminator 18 view .LVU107
 423 011e 8E3A      		cpi r24,lo8(-82)
 424 0120 01F4      		brne .+2
 425 0122 00C0      		rjmp .L28
 426               		.loc 1 793 48 discriminator 20 view .LVU108
 427 0124 8F3A      		cpi r24,lo8(-81)
 428 0126 01F4      		brne .+2
 429 0128 00C0      		rjmp .L29
 430               		.loc 1 793 48 discriminator 22 view .LVU109
 431 012a 813B      		cpi r24,lo8(-79)
 432 012c 01F4      		brne .+2
 433 012e 00C0      		rjmp .L30
 434               		.loc 1 793 48 discriminator 24 view .LVU110
 435 0130 823B      		cpi r24,lo8(-78)
 436 0132 01F4      		brne .+2
 437 0134 00C0      		rjmp .L31
 438               		.loc 1 793 48 discriminator 26 view .LVU111
 439 0136 833B      		cpi r24,lo8(-77)
 440 0138 01F4      		brne .+2
 441 013a 00C0      		rjmp .L32
 442               		.loc 1 793 48 discriminator 28 view .LVU112
 443 013c 843B      		cpi r24,lo8(-76)
 444 013e 01F4      		brne .+2
 445 0140 00C0      		rjmp .L33
 446               		.loc 1 793 48 discriminator 30 view .LVU113
 447 0142 853B      		cpi r24,lo8(-75)
 448 0144 01F4      		brne .+2
 449 0146 00C0      		rjmp .L34
 450               		.loc 1 793 48 discriminator 32 view .LVU114
 451 0148 863B      		cpi r24,lo8(-74)
 452 014a 01F4      		brne .+2
 453 014c 00C0      		rjmp .L35
 454               		.loc 1 793 48 discriminator 34 view .LVU115
 455 014e 873B      		cpi r24,lo8(-73)
 456 0150 01F4      		brne .+2
 457 0152 00C0      		rjmp .L36
 458               		.loc 1 793 48 discriminator 36 view .LVU116
 459 0154 883B      		cpi r24,lo8(-72)
 460 0156 01F4      		brne .+2
 461 0158 00C0      		rjmp .L37
 462               		.loc 1 793 48 discriminator 38 view .LVU117
 463 015a 893B      		cpi r24,lo8(-71)
 464 015c 01F4      		brne .+2
 465 015e 00C0      		rjmp .L38
 466               		.loc 1 793 48 discriminator 40 view .LVU118
 467 0160 8D3B      		cpi r24,lo8(-67)
 468 0162 01F4      		brne .+2
 469 0164 00C0      		rjmp .L39
 470               		.loc 1 793 48 discriminator 42 view .LVU119
 471 0166 8E3B      		cpi r24,lo8(-66)
 472 0168 01F4      		brne .+2
 473 016a 00C0      		rjmp .L40
 474               		.loc 1 793 48 discriminator 44 view .LVU120
 475 016c 8A3B      		cpi r24,lo8(-70)
 476 016e 01F4      		brne .+2
 477 0170 00C0      		rjmp .L41
 478               		.loc 1 793 48 view .LVU121
 479 0172 90E0      		ldi r25,0
 480 0174 80E0      		ldi r24,0
 481               	.LVL37:
 482               	.L16:
 483               		.loc 1 793 29 discriminator 93 view .LVU122
 484 0176 0C94 0000 		jmp host_consumer_send
 485               	.LVL38:
 486               	.L19:
 487               		.loc 1 793 29 view .LVU123
 488 017a 82EE      		ldi r24,lo8(-30)
 489 017c 90E0      		ldi r25,0
 490               	.LVL39:
 491               		.loc 1 793 29 view .LVU124
 492 017e 00C0      		rjmp .L16
 493               	.LVL40:
 494               	.L20:
 495               		.loc 1 793 48 view .LVU125
 496 0180 89EE      		ldi r24,lo8(-23)
 497 0182 90E0      		ldi r25,0
 498               	.LVL41:
 499               		.loc 1 793 48 view .LVU126
 500 0184 00C0      		rjmp .L16
 501               	.LVL42:
 502               	.L21:
 503               		.loc 1 793 48 view .LVU127
 504 0186 8AEE      		ldi r24,lo8(-22)
 505 0188 90E0      		ldi r25,0
 506               	.LVL43:
 507               		.loc 1 793 48 view .LVU128
 508 018a 00C0      		rjmp .L16
 509               	.LVL44:
 510               	.L22:
 511               		.loc 1 793 48 view .LVU129
 512 018c 85EB      		ldi r24,lo8(-75)
 513 018e 90E0      		ldi r25,0
 514               	.LVL45:
 515               		.loc 1 793 48 view .LVU130
 516 0190 00C0      		rjmp .L16
 517               	.LVL46:
 518               	.L23:
 519               		.loc 1 793 48 view .LVU131
 520 0192 86EB      		ldi r24,lo8(-74)
 521 0194 90E0      		ldi r25,0
 522               	.LVL47:
 523               		.loc 1 793 48 view .LVU132
 524 0196 00C0      		rjmp .L16
 525               	.LVL48:
 526               	.L24:
 527               		.loc 1 793 48 view .LVU133
 528 0198 83EB      		ldi r24,lo8(-77)
 529 019a 90E0      		ldi r25,0
 530               	.LVL49:
 531               		.loc 1 793 48 view .LVU134
 532 019c 00C0      		rjmp .L16
 533               	.LVL50:
 534               	.L25:
 535               		.loc 1 793 48 view .LVU135
 536 019e 84EB      		ldi r24,lo8(-76)
 537 01a0 90E0      		ldi r25,0
 538               	.LVL51:
 539               		.loc 1 793 48 view .LVU136
 540 01a2 00C0      		rjmp .L16
 541               	.LVL52:
 542               	.L26:
 543               		.loc 1 793 48 view .LVU137
 544 01a4 87EB      		ldi r24,lo8(-73)
 545 01a6 90E0      		ldi r25,0
 546               	.LVL53:
 547               		.loc 1 793 48 view .LVU138
 548 01a8 00C0      		rjmp .L16
 549               	.LVL54:
 550               	.L27:
 551               		.loc 1 793 48 view .LVU139
 552 01aa 8CEC      		ldi r24,lo8(-52)
 553 01ac 90E0      		ldi r25,0
 554               	.LVL55:
 555               		.loc 1 793 48 view .LVU140
 556 01ae 00C0      		rjmp .L16
 557               	.LVL56:
 558               	.L28:
 559               		.loc 1 793 48 view .LVU141
 560 01b0 8DEC      		ldi r24,lo8(-51)
 561 01b2 90E0      		ldi r25,0
 562               	.LVL57:
 563               		.loc 1 793 48 view .LVU142
 564 01b4 00C0      		rjmp .L16
 565               	.LVL58:
 566               	.L29:
 567               		.loc 1 793 48 view .LVU143
 568 01b6 83E8      		ldi r24,lo8(-125)
 569 01b8 91E0      		ldi r25,lo8(1)
 570               	.LVL59:
 571               		.loc 1 793 48 view .LVU144
 572 01ba 00C0      		rjmp .L16
 573               	.LVL60:
 574               	.L30:
 575               		.loc 1 793 48 view .LVU145
 576 01bc 8AE8      		ldi r24,lo8(-118)
 577 01be 91E0      		ldi r25,lo8(1)
 578               	.LVL61:
 579               		.loc 1 793 48 view .LVU146
 580 01c0 00C0      		rjmp .L16
 581               	.LVL62:
 582               	.L31:
 583               		.loc 1 793 48 view .LVU147
 584 01c2 82E9      		ldi r24,lo8(-110)
 585 01c4 91E0      		ldi r25,lo8(1)
 586               	.LVL63:
 587               		.loc 1 793 48 view .LVU148
 588 01c6 00C0      		rjmp .L16
 589               	.LVL64:
 590               	.L32:
 591               		.loc 1 793 48 view .LVU149
 592 01c8 84E9      		ldi r24,lo8(-108)
 593 01ca 91E0      		ldi r25,lo8(1)
 594               	.LVL65:
 595               		.loc 1 793 48 view .LVU150
 596 01cc 00C0      		rjmp .L16
 597               	.LVL66:
 598               	.L33:
 599               		.loc 1 793 48 view .LVU151
 600 01ce 81E2      		ldi r24,lo8(33)
 601 01d0 92E0      		ldi r25,lo8(2)
 602               	.LVL67:
 603               		.loc 1 793 48 view .LVU152
 604 01d2 00C0      		rjmp .L16
 605               	.LVL68:
 606               	.L34:
 607               		.loc 1 793 48 view .LVU153
 608 01d4 83E2      		ldi r24,lo8(35)
 609 01d6 92E0      		ldi r25,lo8(2)
 610               	.LVL69:
 611               		.loc 1 793 48 view .LVU154
 612 01d8 00C0      		rjmp .L16
 613               	.LVL70:
 614               	.L35:
 615               		.loc 1 793 48 view .LVU155
 616 01da 84E2      		ldi r24,lo8(36)
 617 01dc 92E0      		ldi r25,lo8(2)
 618               	.LVL71:
 619               		.loc 1 793 48 view .LVU156
 620 01de 00C0      		rjmp .L16
 621               	.LVL72:
 622               	.L36:
 623               		.loc 1 793 48 view .LVU157
 624 01e0 85E2      		ldi r24,lo8(37)
 625 01e2 92E0      		ldi r25,lo8(2)
 626               	.LVL73:
 627               		.loc 1 793 48 view .LVU158
 628 01e4 00C0      		rjmp .L16
 629               	.LVL74:
 630               	.L37:
 631               		.loc 1 793 48 view .LVU159
 632 01e6 86E2      		ldi r24,lo8(38)
 633 01e8 92E0      		ldi r25,lo8(2)
 634               	.LVL75:
 635               		.loc 1 793 48 view .LVU160
 636 01ea 00C0      		rjmp .L16
 637               	.LVL76:
 638               	.L38:
 639               		.loc 1 793 48 view .LVU161
 640 01ec 87E2      		ldi r24,lo8(39)
 641 01ee 92E0      		ldi r25,lo8(2)
 642               	.LVL77:
 643               		.loc 1 793 48 view .LVU162
 644 01f0 00C0      		rjmp .L16
 645               	.LVL78:
 646               	.L39:
 647               		.loc 1 793 48 view .LVU163
 648 01f2 8FE6      		ldi r24,lo8(111)
 649 01f4 90E0      		ldi r25,0
 650               	.LVL79:
 651               		.loc 1 793 48 view .LVU164
 652 01f6 00C0      		rjmp .L16
 653               	.LVL80:
 654               	.L40:
 655               		.loc 1 793 48 view .LVU165
 656 01f8 80E7      		ldi r24,lo8(112)
 657 01fa 90E0      		ldi r25,0
 658               	.LVL81:
 659               		.loc 1 793 48 view .LVU166
 660 01fc 00C0      		rjmp .L16
 661               	.LVL82:
 662               	.L41:
 663               		.loc 1 793 48 view .LVU167
 664 01fe 8AE2      		ldi r24,lo8(42)
 665 0200 92E0      		ldi r25,lo8(2)
 666               	.LVL83:
 667               		.loc 1 793 48 view .LVU168
 668 0202 00C0      		rjmp .L16
 669               	.LVL84:
 670               	.L15:
 794:tmk_core/common/action.c **** 
 795:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 796:tmk_core/common/action.c ****     else if
 671               		.loc 1 796 10 is_stmt 1 view .LVU169
 797:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 672               		.loc 1 797 9 is_stmt 0 view .LVU170
 673 0204 803F      		cpi r24,lo8(-16)
 674 0206 00F0      		brlo .L4
 798:tmk_core/common/action.c ****             mousekey_on(code);
 675               		.loc 1 798 13 is_stmt 1 view .LVU171
 676 0208 0E94 0000 		call mousekey_on
 677               	.LVL85:
 799:tmk_core/common/action.c ****             mousekey_send();
 678               		.loc 1 799 13 view .LVU172
 679 020c 0C94 0000 		jmp mousekey_send
 680               	.LVL86:
 681               	.L4:
 682               	/* epilogue start */
 800:tmk_core/common/action.c ****         }
 801:tmk_core/common/action.c **** #endif
 802:tmk_core/common/action.c **** }
 683               		.loc 1 802 1 is_stmt 0 view .LVU173
 684 0210 0895      		ret
 685               		.cfi_endproc
 686               	.LFE112:
 688               		.section	.text.unregister_code,"ax",@progbits
 689               	.global	unregister_code
 691               	unregister_code:
 692               	.LVL87:
 693               	.LFB113:
 803:tmk_core/common/action.c **** 
 804:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 805:tmk_core/common/action.c ****  *
 806:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 807:tmk_core/common/action.c ****  */
 808:tmk_core/common/action.c **** void unregister_code(uint8_t code) {
 694               		.loc 1 808 36 is_stmt 1 view -0
 695               		.cfi_startproc
 696               	/* prologue: function */
 697               	/* frame size = 0 */
 698               	/* stack size = 0 */
 699               	.L__stack_usage = 0
 809:tmk_core/common/action.c ****     if (code == KC_NO) {
 700               		.loc 1 809 5 view .LVU175
 701               		.loc 1 809 8 is_stmt 0 view .LVU176
 702 0000 8823      		tst r24
 703 0002 01F4      		brne .+2
 704 0004 00C0      		rjmp .L44
 810:tmk_core/common/action.c ****         return;
 811:tmk_core/common/action.c ****     }
 812:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 813:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 705               		.loc 1 813 10 is_stmt 1 view .LVU177
 706               		.loc 1 813 13 is_stmt 0 view .LVU178
 707 0006 8238      		cpi r24,lo8(-126)
 708 0008 01F4      		brne .L47
 814:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 815:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 816:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK))) return;
 709               		.loc 1 816 9 is_stmt 1 view .LVU179
 710               		.loc 1 816 15 is_stmt 0 view .LVU180
 711 000a 0E94 0000 		call host_keyboard_leds
 712               	.LVL88:
 713               		.loc 1 816 12 view .LVU181
 714 000e 81FF      		sbrs r24,1
 715 0010 00C0      		rjmp .L44
 817:tmk_core/common/action.c **** #    endif
 818:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 716               		.loc 1 818 9 is_stmt 1 view .LVU182
 717 0012 89E3      		ldi r24,lo8(57)
 718 0014 0E94 0000 		call add_key
 719               	.LVL89:
 819:tmk_core/common/action.c ****         send_keyboard_report();
 720               		.loc 1 819 9 view .LVU183
 721 0018 0E94 0000 		call send_keyboard_report
 722               	.LVL90:
 820:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 723               		.loc 1 820 9 view .LVU184
 724 001c 89E3      		ldi r24,lo8(57)
 725               	.L64:
 821:tmk_core/common/action.c ****         send_keyboard_report();
 822:tmk_core/common/action.c ****     }
 823:tmk_core/common/action.c **** 
 824:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 825:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 826:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_NUM_LOCK))) return;
 827:tmk_core/common/action.c **** #    endif
 828:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 829:tmk_core/common/action.c ****         send_keyboard_report();
 830:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 726               		.loc 1 830 9 is_stmt 0 view .LVU185
 727 001e 0E94 0000 		call del_key
 728               	.LVL91:
 729               	.L65:
 831:tmk_core/common/action.c ****         send_keyboard_report();
 730               		.loc 1 831 9 is_stmt 1 view .LVU186
 731 0022 0C94 0000 		jmp send_keyboard_report
 732               	.LVL92:
 733               	.L47:
 824:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 734               		.loc 1 824 10 view .LVU187
 824:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 735               		.loc 1 824 13 is_stmt 0 view .LVU188
 736 0026 8338      		cpi r24,lo8(-125)
 737 0028 01F4      		brne .L49
 826:tmk_core/common/action.c **** #    endif
 738               		.loc 1 826 9 is_stmt 1 view .LVU189
 826:tmk_core/common/action.c **** #    endif
 739               		.loc 1 826 15 is_stmt 0 view .LVU190
 740 002a 0E94 0000 		call host_keyboard_leds
 741               	.LVL93:
 826:tmk_core/common/action.c **** #    endif
 742               		.loc 1 826 12 view .LVU191
 743 002e 80FF      		sbrs r24,0
 744 0030 00C0      		rjmp .L44
 828:tmk_core/common/action.c ****         send_keyboard_report();
 745               		.loc 1 828 9 is_stmt 1 view .LVU192
 746 0032 83E5      		ldi r24,lo8(83)
 747 0034 0E94 0000 		call add_key
 748               	.LVL94:
 829:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 749               		.loc 1 829 9 view .LVU193
 750 0038 0E94 0000 		call send_keyboard_report
 751               	.LVL95:
 830:tmk_core/common/action.c ****         send_keyboard_report();
 752               		.loc 1 830 9 view .LVU194
 753 003c 83E5      		ldi r24,lo8(83)
 754 003e 00C0      		rjmp .L64
 755               	.LVL96:
 756               	.L49:
 832:tmk_core/common/action.c ****     }
 833:tmk_core/common/action.c **** 
 834:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 757               		.loc 1 834 10 view .LVU195
 758               		.loc 1 834 13 is_stmt 0 view .LVU196
 759 0040 8438      		cpi r24,lo8(-124)
 760 0042 01F4      		brne .L50
 835:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 836:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK))) return;
 761               		.loc 1 836 9 is_stmt 1 view .LVU197
 762               		.loc 1 836 15 is_stmt 0 view .LVU198
 763 0044 0E94 0000 		call host_keyboard_leds
 764               	.LVL97:
 765               		.loc 1 836 12 view .LVU199
 766 0048 82FF      		sbrs r24,2
 767 004a 00C0      		rjmp .L44
 837:tmk_core/common/action.c **** #    endif
 838:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 768               		.loc 1 838 9 is_stmt 1 view .LVU200
 769 004c 87E4      		ldi r24,lo8(71)
 770 004e 0E94 0000 		call add_key
 771               	.LVL98:
 839:tmk_core/common/action.c ****         send_keyboard_report();
 772               		.loc 1 839 9 view .LVU201
 773 0052 0E94 0000 		call send_keyboard_report
 774               	.LVL99:
 840:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 775               		.loc 1 840 9 view .LVU202
 776 0056 87E4      		ldi r24,lo8(71)
 777 0058 00C0      		rjmp .L64
 778               	.LVL100:
 779               	.L50:
 841:tmk_core/common/action.c ****         send_keyboard_report();
 842:tmk_core/common/action.c ****     }
 843:tmk_core/common/action.c **** #endif
 844:tmk_core/common/action.c **** 
 845:tmk_core/common/action.c ****     else if
 780               		.loc 1 845 10 view .LVU203
 846:tmk_core/common/action.c ****         IS_KEY(code) {
 781               		.loc 1 846 9 is_stmt 0 view .LVU204
 782 005a 9CEF      		ldi r25,lo8(-4)
 783 005c 980F      		add r25,r24
 784 005e 913A      		cpi r25,lo8(-95)
 785 0060 00F0      		brlo .L64
 847:tmk_core/common/action.c ****             del_key(code);
 848:tmk_core/common/action.c ****             send_keyboard_report();
 849:tmk_core/common/action.c ****         }
 850:tmk_core/common/action.c ****     else if
 786               		.loc 1 850 10 is_stmt 1 view .LVU205
 851:tmk_core/common/action.c ****         IS_MOD(code) {
 787               		.loc 1 851 9 is_stmt 0 view .LVU206
 788 0062 90E2      		ldi r25,lo8(32)
 789 0064 980F      		add r25,r24
 790 0066 9830      		cpi r25,lo8(8)
 791 0068 00F4      		brsh .L52
 852:tmk_core/common/action.c ****             del_mods(MOD_BIT(code));
 792               		.loc 1 852 13 is_stmt 1 view .LVU207
 793               		.loc 1 852 22 is_stmt 0 view .LVU208
 794 006a 8770      		andi r24,lo8(7)
 795               	.LVL101:
 796               		.loc 1 852 13 view .LVU209
 797 006c 91E0      		ldi r25,lo8(1)
 798 006e 00C0      		rjmp 2f
 799               		1:
 800 0070 990F      		lsl r25
 801               		2:
 802 0072 8A95      		dec r24
 803 0074 02F4      		brpl 1b
 804 0076 892F      		mov r24,r25
 805 0078 0E94 0000 		call del_mods
 806               	.LVL102:
 853:tmk_core/common/action.c ****             send_keyboard_report();
 807               		.loc 1 853 13 is_stmt 1 view .LVU210
 808 007c 00C0      		rjmp .L65
 809               	.LVL103:
 810               	.L52:
 854:tmk_core/common/action.c ****         }
 855:tmk_core/common/action.c ****     else if
 811               		.loc 1 855 10 view .LVU211
 856:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(0); }
 812               		.loc 1 856 9 is_stmt 0 view .LVU212
 813 007e 9BE5      		ldi r25,lo8(91)
 814 0080 980F      		add r25,r24
 815 0082 9330      		cpi r25,lo8(3)
 816 0084 00F4      		brsh .L53
 817               		.loc 1 856 27 is_stmt 1 discriminator 1 view .LVU213
 818 0086 90E0      		ldi r25,0
 819 0088 80E0      		ldi r24,0
 820               	.LVL104:
 821               		.loc 1 856 27 is_stmt 0 discriminator 1 view .LVU214
 822 008a 0C94 0000 		jmp host_system_send
 823               	.LVL105:
 824               	.L53:
 857:tmk_core/common/action.c ****     else if
 825               		.loc 1 857 10 is_stmt 1 view .LVU215
 858:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(0); }
 826               		.loc 1 858 9 is_stmt 0 view .LVU216
 827 008e 98E5      		ldi r25,lo8(88)
 828 0090 980F      		add r25,r24
 829 0092 9731      		cpi r25,lo8(23)
 830 0094 00F4      		brsh .L54
 831               		.loc 1 858 29 is_stmt 1 discriminator 1 view .LVU217
 832 0096 90E0      		ldi r25,0
 833 0098 80E0      		ldi r24,0
 834               	.LVL106:
 835               		.loc 1 858 29 is_stmt 0 discriminator 1 view .LVU218
 836 009a 0C94 0000 		jmp host_consumer_send
 837               	.LVL107:
 838               	.L54:
 859:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 860:tmk_core/common/action.c ****     else if
 839               		.loc 1 860 10 is_stmt 1 view .LVU219
 861:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 840               		.loc 1 861 9 is_stmt 0 view .LVU220
 841 009e 803F      		cpi r24,lo8(-16)
 842 00a0 00F0      		brlo .L44
 862:tmk_core/common/action.c ****             mousekey_off(code);
 843               		.loc 1 862 13 is_stmt 1 view .LVU221
 844 00a2 0E94 0000 		call mousekey_off
 845               	.LVL108:
 863:tmk_core/common/action.c ****             mousekey_send();
 846               		.loc 1 863 13 view .LVU222
 847 00a6 0C94 0000 		jmp mousekey_send
 848               	.LVL109:
 849               	.L44:
 850               	/* epilogue start */
 864:tmk_core/common/action.c ****         }
 865:tmk_core/common/action.c **** #endif
 866:tmk_core/common/action.c **** }
 851               		.loc 1 866 1 is_stmt 0 view .LVU223
 852 00aa 0895      		ret
 853               		.cfi_endproc
 854               	.LFE113:
 856               		.section	.text.tap_code,"ax",@progbits
 857               	.global	tap_code
 859               	tap_code:
 860               	.LVL110:
 861               	.LFB114:
 867:tmk_core/common/action.c **** 
 868:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 869:tmk_core/common/action.c ****  *
 870:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 871:tmk_core/common/action.c ****  */
 872:tmk_core/common/action.c **** void tap_code(uint8_t code) {
 862               		.loc 1 872 29 is_stmt 1 view -0
 863               		.cfi_startproc
 864               		.loc 1 872 29 is_stmt 0 view .LVU225
 865 0000 CF93      		push r28
 866               	.LCFI4:
 867               		.cfi_def_cfa_offset 3
 868               		.cfi_offset 28, -2
 869               	/* prologue: function */
 870               	/* frame size = 0 */
 871               	/* stack size = 1 */
 872               	.L__stack_usage = 1
 873 0002 C82F      		mov r28,r24
 873:tmk_core/common/action.c ****     register_code(code);
 874               		.loc 1 873 5 is_stmt 1 view .LVU226
 875 0004 0E94 0000 		call register_code
 876               	.LVL111:
 874:tmk_core/common/action.c ****     if (code == KC_CAPS) {
 877               		.loc 1 874 5 view .LVU227
 878               		.loc 1 874 8 is_stmt 0 view .LVU228
 879 0008 C933      		cpi r28,lo8(57)
 880 000a 01F4      		brne .L68
 875:tmk_core/common/action.c ****         wait_ms(TAP_HOLD_CAPS_DELAY);
 881               		.loc 1 875 9 is_stmt 1 view .LVU229
 882               	.LVL112:
 883               	.LBB28:
 884               	.LBI28:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 885               		.loc 2 166 1 view .LVU230
 886               	.LBB29:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 887               		.loc 2 168 2 view .LVU231
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 888               		.loc 2 172 2 view .LVU232
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 889               		.loc 2 173 2 view .LVU233
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 890               		.loc 2 174 2 view .LVU234
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 891               		.loc 2 184 3 view .LVU235
 892               		.loc 2 187 2 view .LVU236
 893 000c 2FEF      		ldi r18,lo8(255999)
 894 000e 87EE      		ldi r24,hi8(255999)
 895 0010 93E0      		ldi r25,hlo8(255999)
 896 0012 2150      	1:	subi r18,1
 897 0014 8040      		sbci r24,0
 898 0016 9040      		sbci r25,0
 899 0018 01F4      		brne 1b
 900 001a 00C0      		rjmp .
 901 001c 0000      		nop
 902               	.LVL113:
 903               	.L68:
 904               		.loc 2 187 2 is_stmt 0 view .LVU237
 905               	.LBE29:
 906               	.LBE28:
 876:tmk_core/common/action.c ****     } else {
 877:tmk_core/common/action.c ****         wait_ms(TAP_CODE_DELAY);
 878:tmk_core/common/action.c ****     }
 879:tmk_core/common/action.c ****     unregister_code(code);
 907               		.loc 1 879 5 is_stmt 1 view .LVU238
 908 001e 8C2F      		mov r24,r28
 909               	/* epilogue start */
 880:tmk_core/common/action.c **** }
 910               		.loc 1 880 1 is_stmt 0 view .LVU239
 911 0020 CF91      		pop r28
 912               	.LVL114:
 879:tmk_core/common/action.c **** }
 913               		.loc 1 879 5 view .LVU240
 914 0022 0C94 0000 		jmp unregister_code
 915               	.LVL115:
 879:tmk_core/common/action.c **** }
 916               		.loc 1 879 5 view .LVU241
 917               		.cfi_endproc
 918               	.LFE114:
 920               		.section	.text.register_mods,"ax",@progbits
 921               	.global	register_mods
 923               	register_mods:
 924               	.LVL116:
 925               	.LFB115:
 881:tmk_core/common/action.c **** 
 882:tmk_core/common/action.c **** /** \brief Adds the given physically pressed modifiers and sends a keyboard report immediately.
 883:tmk_core/common/action.c ****  *
 884:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 885:tmk_core/common/action.c ****  */
 886:tmk_core/common/action.c **** void register_mods(uint8_t mods) {
 926               		.loc 1 886 34 is_stmt 1 view -0
 927               		.cfi_startproc
 928               	/* prologue: function */
 929               	/* frame size = 0 */
 930               	/* stack size = 0 */
 931               	.L__stack_usage = 0
 887:tmk_core/common/action.c ****     if (mods) {
 932               		.loc 1 887 5 view .LVU243
 933               		.loc 1 887 8 is_stmt 0 view .LVU244
 934 0000 8823      		tst r24
 935 0002 01F0      		breq .L69
 888:tmk_core/common/action.c ****         add_mods(mods);
 936               		.loc 1 888 9 is_stmt 1 view .LVU245
 937 0004 0E94 0000 		call add_mods
 938               	.LVL117:
 889:tmk_core/common/action.c ****         send_keyboard_report();
 939               		.loc 1 889 9 view .LVU246
 940 0008 0C94 0000 		jmp send_keyboard_report
 941               	.LVL118:
 942               	.L69:
 943               	/* epilogue start */
 890:tmk_core/common/action.c ****     }
 891:tmk_core/common/action.c **** }
 944               		.loc 1 891 1 is_stmt 0 view .LVU247
 945 000c 0895      		ret
 946               		.cfi_endproc
 947               	.LFE115:
 949               		.section	.text.unregister_mods,"ax",@progbits
 950               	.global	unregister_mods
 952               	unregister_mods:
 953               	.LVL119:
 954               	.LFB116:
 892:tmk_core/common/action.c **** 
 893:tmk_core/common/action.c **** /** \brief Removes the given physically pressed modifiers and sends a keyboard report immediately.
 894:tmk_core/common/action.c ****  *
 895:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 896:tmk_core/common/action.c ****  */
 897:tmk_core/common/action.c **** void unregister_mods(uint8_t mods) {
 955               		.loc 1 897 36 is_stmt 1 view -0
 956               		.cfi_startproc
 957               	/* prologue: function */
 958               	/* frame size = 0 */
 959               	/* stack size = 0 */
 960               	.L__stack_usage = 0
 898:tmk_core/common/action.c ****     if (mods) {
 961               		.loc 1 898 5 view .LVU249
 962               		.loc 1 898 8 is_stmt 0 view .LVU250
 963 0000 8823      		tst r24
 964 0002 01F0      		breq .L71
 899:tmk_core/common/action.c ****         del_mods(mods);
 965               		.loc 1 899 9 is_stmt 1 view .LVU251
 966 0004 0E94 0000 		call del_mods
 967               	.LVL120:
 900:tmk_core/common/action.c ****         send_keyboard_report();
 968               		.loc 1 900 9 view .LVU252
 969 0008 0C94 0000 		jmp send_keyboard_report
 970               	.LVL121:
 971               	.L71:
 972               	/* epilogue start */
 901:tmk_core/common/action.c ****     }
 902:tmk_core/common/action.c **** }
 973               		.loc 1 902 1 is_stmt 0 view .LVU253
 974 000c 0895      		ret
 975               		.cfi_endproc
 976               	.LFE116:
 978               		.section	.text.process_action,"ax",@progbits
 979               	.global	process_action
 981               	process_action:
 982               	.LVL122:
 983               	.LFB111:
 204:tmk_core/common/action.c ****     keyevent_t event = record->event;
 984               		.loc 1 204 59 is_stmt 1 view -0
 985               		.cfi_startproc
 204:tmk_core/common/action.c ****     keyevent_t event = record->event;
 986               		.loc 1 204 59 is_stmt 0 view .LVU255
 987 0000 BF92      		push r11
 988               	.LCFI5:
 989               		.cfi_def_cfa_offset 3
 990               		.cfi_offset 11, -2
 991 0002 CF92      		push r12
 992               	.LCFI6:
 993               		.cfi_def_cfa_offset 4
 994               		.cfi_offset 12, -3
 995 0004 DF92      		push r13
 996               	.LCFI7:
 997               		.cfi_def_cfa_offset 5
 998               		.cfi_offset 13, -4
 999 0006 EF92      		push r14
 1000               	.LCFI8:
 1001               		.cfi_def_cfa_offset 6
 1002               		.cfi_offset 14, -5
 1003 0008 FF92      		push r15
 1004               	.LCFI9:
 1005               		.cfi_def_cfa_offset 7
 1006               		.cfi_offset 15, -6
 1007 000a 0F93      		push r16
 1008               	.LCFI10:
 1009               		.cfi_def_cfa_offset 8
 1010               		.cfi_offset 16, -7
 1011 000c 1F93      		push r17
 1012               	.LCFI11:
 1013               		.cfi_def_cfa_offset 9
 1014               		.cfi_offset 17, -8
 1015 000e CF93      		push r28
 1016               	.LCFI12:
 1017               		.cfi_def_cfa_offset 10
 1018               		.cfi_offset 28, -9
 1019 0010 DF93      		push r29
 1020               	.LCFI13:
 1021               		.cfi_def_cfa_offset 11
 1022               		.cfi_offset 29, -10
 1023               	/* prologue: function */
 1024               	/* frame size = 0 */
 1025               	/* stack size = 9 */
 1026               	.L__stack_usage = 9
 1027 0012 6C01      		movw r12,r24
 1028 0014 D62F      		mov r29,r22
 204:tmk_core/common/action.c ****     keyevent_t event = record->event;
 1029               		.loc 1 204 59 view .LVU256
 1030 0016 C72F      		mov r28,r23
 205:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 1031               		.loc 1 205 5 is_stmt 1 view .LVU257
 1032               	.LVL123:
 207:tmk_core/common/action.c **** #endif
 1033               		.loc 1 207 5 view .LVU258
 207:tmk_core/common/action.c **** #endif
 1034               		.loc 1 207 36 is_stmt 0 view .LVU259
 1035 0018 FC01      		movw r30,r24
 1036 001a 0581      		ldd r16,Z+5
 1037 001c 0295      		swap r16
 1038 001e 0F70      		andi r16,lo8(15)
 1039               	.LVL124:
 210:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1040               		.loc 1 210 5 is_stmt 1 view .LVU260
 210:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1041               		.loc 1 210 14 is_stmt 0 view .LVU261
 1042 0020 1281      		ldd r17,Z+2
 210:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1043               		.loc 1 210 8 view .LVU262
 1044 0022 1111      		cpse r17,__zero_reg__
 212:tmk_core/common/action.c ****     }
 1045               		.loc 1 212 9 is_stmt 1 view .LVU263
 1046 0024 0E94 0000 		call clear_weak_mods
 1047               	.LVL125:
 1048               	.L74:
 216:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 1049               		.loc 1 216 5 view .LVU264
 218:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1050               		.loc 1 218 5 view .LVU265
 218:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1051               		.loc 1 218 9 is_stmt 0 view .LVU266
 1052 0028 0E94 0000 		call is_oneshot_layer_active
 1053               	.LVL126:
 218:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1054               		.loc 1 218 9 view .LVU267
 1055 002c E82E      		mov r14,r24
 218:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1056               		.loc 1 218 8 view .LVU268
 1057 002e 8823      		tst r24
 1058 0030 01F0      		breq .L75
 218:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1059               		.loc 1 218 35 discriminator 1 view .LVU269
 1060 0032 1123      		tst r17
 1061 0034 01F0      		breq .L166
 218:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1062               		.loc 1 218 55 discriminator 2 view .LVU270
 1063 0036 80E2      		ldi r24,lo8(32)
 218:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1064               		.loc 1 218 55 discriminator 2 view .LVU271
 1065 0038 8D0F      		add r24,r29
 218:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1066               		.loc 1 218 52 discriminator 2 view .LVU272
 1067 003a 8830      		cpi r24,lo8(8)
 1068 003c 00F0      		brlo .L166
 219:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 1069               		.loc 1 219 9 is_stmt 1 view .LVU273
 1070 003e 82E0      		ldi r24,lo8(2)
 1071 0040 0E94 0000 		call clear_oneshot_layer_state
 1072               	.LVL127:
 220:tmk_core/common/action.c ****     }
 1073               		.loc 1 220 9 view .LVU274
 220:tmk_core/common/action.c ****     }
 1074               		.loc 1 220 31 is_stmt 0 view .LVU275
 1075 0044 0E94 0000 		call is_oneshot_layer_active
 1076               	.LVL128:
 220:tmk_core/common/action.c ****     }
 1077               		.loc 1 220 9 view .LVU276
 1078 0048 91E0      		ldi r25,lo8(1)
 1079 004a E82E      		mov r14,r24
 1080 004c E926      		eor r14,r25
 1081               	.LVL129:
 1082               	.L75:
 224:tmk_core/common/action.c ****         /* Key and Mods */
 1083               		.loc 1 224 5 is_stmt 1 view .LVU277
 224:tmk_core/common/action.c ****         /* Key and Mods */
 1084               		.loc 1 224 24 is_stmt 0 view .LVU278
 1085 004e BC2E      		mov r11,r28
 1086 0050 B294      		swap r11
 1087 0052 9FE0      		ldi r25,lo8(15)
 1088 0054 B922      		and r11,r25
 224:tmk_core/common/action.c ****         /* Key and Mods */
 1089               		.loc 1 224 5 view .LVU279
 1090 0056 EB2D      		mov r30,r11
 1091 0058 F0E0      		ldi r31,0
 1092 005a E050      		subi r30,lo8(-(gs(.L78)))
 1093 005c F040      		sbci r31,hi8(-(gs(.L78)))
 1094 005e 0C94 0000 		jmp __tablejump2__
 1095               		.section	.jumptables.gcc.process_action,"a",@progbits
 1096               		.p2align	1
 1097               	.L78:
 1098 0000 0000      		.word gs(.L87)
 1099 0002 0000      		.word gs(.L87)
 1100 0004 0000      		.word gs(.L86)
 1101 0006 0000      		.word gs(.L86)
 1102 0008 0000      		.word gs(.L85)
 1103 000a 0000      		.word gs(.L84)
 1104 000c 0000      		.word gs(.L76)
 1105 000e 0000      		.word gs(.L76)
 1106 0010 0000      		.word gs(.L83)
 1107 0012 0000      		.word gs(.L82)
 1108 0014 0000      		.word gs(.L81)
 1109 0016 0000      		.word gs(.L81)
 1110 0018 0000      		.word gs(.L80)
 1111 001a 0000      		.word gs(.L79)
 1112 001c 0000      		.word gs(.L76)
 1113 001e 0000      		.word gs(.L77)
 1114               		.section	.text.process_action
 1115               	.LVL130:
 1116               	.L166:
 216:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 1117               		.loc 1 216 10 view .LVU280
 1118 0062 E12C      		mov r14,__zero_reg__
 1119 0064 00C0      		rjmp .L75
 1120               	.LVL131:
 1121               	.L87:
 1122               	.LBB30:
 228:tmk_core/common/action.c ****             if (event.pressed) {
 1123               		.loc 1 228 13 is_stmt 1 view .LVU281
 1124 0066 0C2F      		mov r16,r28
 1125               	.LVL132:
 228:tmk_core/common/action.c ****             if (event.pressed) {
 1126               		.loc 1 228 13 is_stmt 0 view .LVU282
 1127 0068 0F70      		andi r16,lo8(15)
 228:tmk_core/common/action.c ****             if (event.pressed) {
 1128               		.loc 1 228 44 view .LVU283
 1129 006a C07F      		andi r28,lo8(-16)
 1130               	.LVL133:
 228:tmk_core/common/action.c ****             if (event.pressed) {
 1131               		.loc 1 228 21 view .LVU284
 1132 006c 01F0      		breq .L88
 228:tmk_core/common/action.c ****             if (event.pressed) {
 1133               		.loc 1 228 21 discriminator 2 view .LVU285
 1134 006e 0295      		swap r16
 1135 0070 007F      		andi r16,lo8(-16)
 1136               	.L88:
 1137               	.LVL134:
 229:tmk_core/common/action.c ****                 if (mods) {
 1138               		.loc 1 229 13 is_stmt 1 discriminator 4 view .LVU286
 229:tmk_core/common/action.c ****                 if (mods) {
 1139               		.loc 1 229 16 is_stmt 0 discriminator 4 view .LVU287
 1140 0072 1123      		tst r17
 1141 0074 01F0      		breq .L89
 230:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1142               		.loc 1 230 17 is_stmt 1 view .LVU288
 230:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1143               		.loc 1 230 20 is_stmt 0 view .LVU289
 1144 0076 0023      		tst r16
 1145 0078 01F0      		breq .L198
 231:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1146               		.loc 1 231 21 is_stmt 1 view .LVU290
 231:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1147               		.loc 1 231 25 is_stmt 0 view .LVU291
 1148 007a 80E2      		ldi r24,lo8(32)
 1149 007c 8D0F      		add r24,r29
 231:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1150               		.loc 1 231 24 view .LVU292
 1151 007e 8830      		cpi r24,lo8(8)
 1152 0080 00F0      		brlo .L91
 231:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1153               		.loc 1 231 49 discriminator 1 view .LVU293
 1154 0082 D111      		cpse r29,__zero_reg__
 1155 0084 00C0      		rjmp .L92
 1156               	.L91:
 235:tmk_core/common/action.c ****                     } else {
 1157               		.loc 1 235 25 is_stmt 1 view .LVU294
 1158 0086 802F      		mov r24,r16
 1159 0088 0E94 0000 		call add_mods
 1160               	.LVL135:
 1161               	.L93:
 239:tmk_core/common/action.c ****                 }
 1162               		.loc 1 239 21 view .LVU295
 1163 008c 0E94 0000 		call send_keyboard_report
 1164               	.LVL136:
 241:tmk_core/common/action.c ****             } else {
 1165               		.loc 1 241 17 view .LVU296
 1166               	.L198:
 241:tmk_core/common/action.c ****             } else {
 1167               		.loc 1 241 17 is_stmt 0 view .LVU297
 1168               	.LBE30:
 532:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1169               		.loc 1 532 75 is_stmt 1 view .LVU298
 533:tmk_core/common/action.c ****                         } else {
 1170               		.loc 1 533 29 view .LVU299
 1171 0090 8D2F      		mov r24,r29
 1172 0092 0E94 0000 		call register_code
 1173               	.LVL137:
 1174 0096 00C0      		rjmp .L76
 1175               	.LVL138:
 1176               	.L92:
 1177               	.LBB31:
 237:tmk_core/common/action.c ****                     }
 1178               		.loc 1 237 25 view .LVU300
 1179 0098 802F      		mov r24,r16
 1180 009a 0E94 0000 		call add_weak_mods
 1181               	.LVL139:
 1182 009e 00C0      		rjmp .L93
 1183               	.L89:
 243:tmk_core/common/action.c ****                 if (mods) {
 1184               		.loc 1 243 17 view .LVU301
 1185 00a0 8D2F      		mov r24,r29
 1186 00a2 0E94 0000 		call unregister_code
 1187               	.LVL140:
 244:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1188               		.loc 1 244 17 view .LVU302
 244:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1189               		.loc 1 244 20 is_stmt 0 view .LVU303
 1190 00a6 0023      		tst r16
 1191 00a8 01F0      		breq .L76
 245:tmk_core/common/action.c ****                         del_mods(mods);
 1192               		.loc 1 245 21 is_stmt 1 view .LVU304
 245:tmk_core/common/action.c ****                         del_mods(mods);
 1193               		.loc 1 245 25 is_stmt 0 view .LVU305
 1194 00aa 80E2      		ldi r24,lo8(32)
 1195 00ac 8D0F      		add r24,r29
 245:tmk_core/common/action.c ****                         del_mods(mods);
 1196               		.loc 1 245 24 view .LVU306
 1197 00ae 8830      		cpi r24,lo8(8)
 1198 00b0 00F0      		brlo .L95
 245:tmk_core/common/action.c ****                         del_mods(mods);
 1199               		.loc 1 245 49 discriminator 1 view .LVU307
 1200 00b2 D111      		cpse r29,__zero_reg__
 1201 00b4 00C0      		rjmp .L96
 1202               	.L95:
 246:tmk_core/common/action.c ****                     } else {
 1203               		.loc 1 246 25 is_stmt 1 view .LVU308
 1204 00b6 802F      		mov r24,r16
 1205 00b8 0E94 0000 		call del_mods
 1206               	.LVL141:
 1207               	.L97:
 250:tmk_core/common/action.c ****                 }
 1208               		.loc 1 250 21 view .LVU309
 1209 00bc 0E94 0000 		call send_keyboard_report
 1210               	.LVL142:
 1211               	.L76:
 250:tmk_core/common/action.c ****                 }
 1212               		.loc 1 250 21 is_stmt 0 view .LVU310
 1213               	.LBE31:
 665:tmk_core/common/action.c ****         case ACT_LAYER:
 1214               		.loc 1 665 5 is_stmt 1 view .LVU311
 1215 00c0 2B2D      		mov r18,r11
 1216 00c2 2850      		subi r18,8
 1217 00c4 330B      		sbc r19,r19
 1218 00c6 2430      		cpi r18,4
 1219 00c8 3105      		cpc r19,__zero_reg__
 1220 00ca 00F4      		brsh .L161
 672:tmk_core/common/action.c ****             break;
 1221               		.loc 1 672 13 view .LVU312
 1222 00cc 0E94 0000 		call host_keyboard_leds
 1223               	.LVL143:
 1224 00d0 0E94 0000 		call led_set
 1225               	.LVL144:
 673:tmk_core/common/action.c ****         default:
 1226               		.loc 1 673 13 view .LVU313
 1227               	.L161:
 707:tmk_core/common/action.c ****         record->event.pressed = false;
 1228               		.loc 1 707 5 view .LVU314
 707:tmk_core/common/action.c ****         record->event.pressed = false;
 1229               		.loc 1 707 8 is_stmt 0 view .LVU315
 1230 00d4 EE20      		tst r14
 1231 00d6 01F4      		brne .+2
 1232 00d8 00C0      		rjmp .L73
 707:tmk_core/common/action.c ****         record->event.pressed = false;
 1233               		.loc 1 707 33 discriminator 1 view .LVU316
 1234 00da 0E94 0000 		call get_oneshot_layer_state
 1235               	.LVL145:
 707:tmk_core/common/action.c ****         record->event.pressed = false;
 1236               		.loc 1 707 28 discriminator 1 view .LVU317
 1237 00de 80FD      		sbrc r24,0
 1238 00e0 00C0      		rjmp .L73
 708:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1239               		.loc 1 708 9 is_stmt 1 view .LVU318
 708:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1240               		.loc 1 708 31 is_stmt 0 view .LVU319
 1241 00e2 F601      		movw r30,r12
 1242 00e4 1282      		std Z+2,__zero_reg__
 709:tmk_core/common/action.c ****         process_record(record);
 1243               		.loc 1 709 9 is_stmt 1 view .LVU320
 1244 00e6 0E94 0000 		call get_oneshot_layer
 1245               	.LVL146:
 1246 00ea 0E94 0000 		call layer_on
 1247               	.LVL147:
 710:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1248               		.loc 1 710 9 view .LVU321
 1249 00ee C601      		movw r24,r12
 1250 00f0 0E94 0000 		call process_record
 1251               	.LVL148:
 711:tmk_core/common/action.c ****     }
 1252               		.loc 1 711 9 view .LVU322
 1253 00f4 0E94 0000 		call get_oneshot_layer
 1254               	.LVL149:
 1255               	/* epilogue start */
 714:tmk_core/common/action.c **** 
 1256               		.loc 1 714 1 is_stmt 0 view .LVU323
 1257 00f8 DF91      		pop r29
 1258               	.LVL150:
 714:tmk_core/common/action.c **** 
 1259               		.loc 1 714 1 view .LVU324
 1260 00fa CF91      		pop r28
 714:tmk_core/common/action.c **** 
 1261               		.loc 1 714 1 view .LVU325
 1262 00fc 1F91      		pop r17
 1263 00fe 0F91      		pop r16
 1264 0100 FF90      		pop r15
 1265 0102 EF90      		pop r14
 1266               	.LVL151:
 714:tmk_core/common/action.c **** 
 1267               		.loc 1 714 1 view .LVU326
 1268 0104 DF90      		pop r13
 1269 0106 CF90      		pop r12
 1270               	.LVL152:
 714:tmk_core/common/action.c **** 
 1271               		.loc 1 714 1 view .LVU327
 1272 0108 BF90      		pop r11
 711:tmk_core/common/action.c ****     }
 1273               		.loc 1 711 9 view .LVU328
 1274 010a 0C94 0000 		jmp layer_off
 1275               	.LVL153:
 1276               	.L96:
 1277               	.LBB32:
 248:tmk_core/common/action.c ****                     }
 1278               		.loc 1 248 25 is_stmt 1 view .LVU329
 1279 010e 802F      		mov r24,r16
 1280 0110 0E94 0000 		call del_weak_mods
 1281               	.LVL154:
 1282 0114 00C0      		rjmp .L97
 1283               	.LVL155:
 1284               	.L86:
 248:tmk_core/common/action.c ****                     }
 1285               		.loc 1 248 25 is_stmt 0 view .LVU330
 1286               	.LBE32:
 1287               	.LBB33:
 257:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1288               		.loc 1 257 13 is_stmt 1 view .LVU331
 1289 0116 FC2F      		mov r31,r28
 1290 0118 FF70      		andi r31,lo8(15)
 1291 011a FF2E      		mov r15,r31
 257:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1292               		.loc 1 257 44 is_stmt 0 view .LVU332
 1293 011c C07F      		andi r28,lo8(-16)
 1294               	.LVL156:
 257:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1295               		.loc 1 257 21 view .LVU333
 1296 011e C032      		cpi r28,lo8(32)
 1297 0120 01F0      		breq .L98
 257:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1298               		.loc 1 257 21 discriminator 2 view .LVU334
 1299 0122 F294      		swap r15
 1300 0124 80EF      		ldi r24,lo8(-16)
 1301 0126 F822      		and r15,r24
 1302               	.L98:
 1303               	.LVL157:
 258:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1304               		.loc 1 258 13 is_stmt 1 discriminator 4 view .LVU335
 1305 0128 DD23      		tst r29
 1306 012a 01F0      		breq .L99
 1307 012c D130      		cpi r29,lo8(1)
 1308 012e 01F0      		breq .L100
 313:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1309               		.loc 1 313 21 view .LVU336
 313:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1310               		.loc 1 313 24 is_stmt 0 view .LVU337
 1311 0130 1123      		tst r17
 1312 0132 01F0      		breq .L108
 314:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1313               		.loc 1 314 25 is_stmt 1 view .LVU338
 314:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1314               		.loc 1 314 28 is_stmt 0 view .LVU339
 1315 0134 0023      		tst r16
 1316 0136 01F0      		breq .L109
 316:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1317               		.loc 1 316 29 is_stmt 1 view .LVU340
 320:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 1318               		.loc 1 320 33 is_stmt 0 view .LVU341
 1319 0138 F601      		movw r30,r12
 1320 013a 8581      		ldd r24,Z+5
 316:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1321               		.loc 1 316 32 view .LVU342
 1322 013c 80FF      		sbrs r24,0
 1323 013e 00C0      		rjmp .L198
 321:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 1324               		.loc 1 321 76 is_stmt 1 view .LVU343
 323:tmk_core/common/action.c ****                                 register_mods(mods);
 1325               		.loc 1 323 33 view .LVU344
 323:tmk_core/common/action.c ****                                 register_mods(mods);
 1326               		.loc 1 323 51 is_stmt 0 view .LVU345
 1327 0140 8F70      		andi r24,lo8(15)
 1328 0142 8583      		std Z+5,r24
 324:tmk_core/common/action.c ****                             } else
 1329               		.loc 1 324 33 is_stmt 1 view .LVU346
 1330 0144 00C0      		rjmp .L109
 1331               	.L99:
 262:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1332               		.loc 1 262 21 view .LVU347
 262:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1333               		.loc 1 262 24 is_stmt 0 view .LVU348
 1334 0146 1123      		tst r17
 1335 0148 01F0      		breq .L102
 263:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1336               		.loc 1 263 25 is_stmt 1 view .LVU349
 263:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1337               		.loc 1 263 28 is_stmt 0 view .LVU350
 1338 014a 0111      		cpse r16,__zero_reg__
 1339 014c 00C0      		rjmp .L103
 1340               	.L104:
 277:tmk_core/common/action.c ****                         }
 1341               		.loc 1 277 29 is_stmt 1 view .LVU351
 277:tmk_core/common/action.c ****                         }
 1342               		.loc 1 277 50 is_stmt 0 view .LVU352
 1343 014e 0E94 0000 		call get_oneshot_mods
 1344               	.LVL158:
 277:tmk_core/common/action.c ****                         }
 1345               		.loc 1 277 29 view .LVU353
 1346 0152 8F29      		or r24,r15
 1347               	.LVL159:
 1348               	.L197:
 277:tmk_core/common/action.c ****                         }
 1349               		.loc 1 277 29 view .LVU354
 1350               	.LBE33:
 459:tmk_core/common/action.c ****             } else {
 1351               		.loc 1 459 17 view .LVU355
 1352 0154 0E94 0000 		call register_mods
 1353               	.LVL160:
 1354 0158 00C0      		rjmp .L76
 1355               	.LVL161:
 1356               	.L103:
 1357               	.LBB36:
 266:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1358               		.loc 1 266 32 is_stmt 1 view .LVU356
 266:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1359               		.loc 1 266 35 is_stmt 0 view .LVU357
 1360 015a 0130      		cpi r16,lo8(1)
 1361 015c 01F4      		brne .L104
 267:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 1362               		.loc 1 267 65 is_stmt 1 view .LVU358
 268:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1363               		.loc 1 268 29 view .LVU359
 268:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1364               		.loc 1 268 53 is_stmt 0 view .LVU360
 1365 015e 0E94 0000 		call get_oneshot_mods
 1366               	.LVL162:
 268:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1367               		.loc 1 268 29 view .LVU361
 1368 0162 8F29      		or r24,r15
 1369 0164 0E94 0000 		call set_oneshot_mods
 1370               	.LVL163:
 1371 0168 00C0      		rjmp .L76
 1372               	.L102:
 280:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1373               		.loc 1 280 25 is_stmt 1 view .LVU362
 280:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1374               		.loc 1 280 28 is_stmt 0 view .LVU363
 1375 016a 0111      		cpse r16,__zero_reg__
 1376 016c 00C0      		rjmp .L105
 1377               	.L201:
 295:tmk_core/common/action.c ****                             unregister_mods(mods);
 1378               		.loc 1 295 29 is_stmt 1 view .LVU364
 1379 016e 0E94 0000 		call clear_oneshot_mods
 1380               	.LVL164:
 296:tmk_core/common/action.c ****                         }
 1381               		.loc 1 296 29 view .LVU365
 1382               	.L111:
 343:tmk_core/common/action.c ****                             unregister_mods(mods);
 1383               		.loc 1 343 67 view .LVU366
 344:tmk_core/common/action.c ****                         }
 1384               		.loc 1 344 29 view .LVU367
 1385 0172 8F2D      		mov r24,r15
 1386 0174 0E94 0000 		call unregister_mods
 1387               	.LVL165:
 1388 0178 00C0      		rjmp .L76
 1389               	.L105:
 283:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1390               		.loc 1 283 32 view .LVU368
 283:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1391               		.loc 1 283 35 is_stmt 0 view .LVU369
 1392 017a 0130      		cpi r16,lo8(1)
 1393 017c 01F4      		brne .+2
 1394 017e 00C0      		rjmp .L76
 1395 0180 00C0      		rjmp .L201
 1396               	.L100:
 302:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1397               		.loc 1 302 21 is_stmt 1 view .LVU370
 302:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1398               		.loc 1 302 24 is_stmt 0 view .LVU371
 1399 0182 1123      		tst r17
 1400 0184 01F0      		breq .L107
 303:tmk_core/common/action.c ****                             register_mods(mods);
 1401               		.loc 1 303 25 is_stmt 1 view .LVU372
 303:tmk_core/common/action.c ****                             register_mods(mods);
 1402               		.loc 1 303 28 is_stmt 0 view .LVU373
 1403 0186 0630      		cpi r16,lo8(6)
 1404 0188 00F0      		brlo .+2
 1405 018a 00C0      		rjmp .L76
 1406               	.L109:
 332:tmk_core/common/action.c ****                             register_mods(mods);
 1407               		.loc 1 332 67 is_stmt 1 view .LVU374
 333:tmk_core/common/action.c ****                         }
 1408               		.loc 1 333 29 view .LVU375
 1409 018c 8F2D      		mov r24,r15
 1410 018e 00C0      		rjmp .L197
 1411               	.L107:
 307:tmk_core/common/action.c ****                             unregister_mods(mods);
 1412               		.loc 1 307 25 view .LVU376
 307:tmk_core/common/action.c ****                             unregister_mods(mods);
 1413               		.loc 1 307 28 is_stmt 0 view .LVU377
 1414 0190 0530      		cpi r16,lo8(5)
 1415 0192 00F0      		brlo .+2
 1416 0194 00C0      		rjmp .L76
 1417 0196 00C0      		rjmp .L111
 1418               	.L108:
 336:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1419               		.loc 1 336 25 is_stmt 1 view .LVU378
 336:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1420               		.loc 1 336 28 is_stmt 0 view .LVU379
 1421 0198 0023      		tst r16
 1422 019a 01F0      		breq .L111
 337:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1423               		.loc 1 337 71 is_stmt 1 view .LVU380
 338:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1424               		.loc 1 338 29 view .LVU381
 338:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1425               		.loc 1 338 32 is_stmt 0 view .LVU382
 1426 019c D933      		cpi r29,lo8(57)
 1427 019e 01F4      		brne .L153
 339:tmk_core/common/action.c ****                             }
 1428               		.loc 1 339 33 is_stmt 1 view .LVU383
 1429               	.LVL166:
 1430               	.LBB34:
 1431               	.LBI34:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 1432               		.loc 2 166 1 view .LVU384
 1433               	.LBB35:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1434               		.loc 2 168 2 view .LVU385
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1435               		.loc 2 172 2 view .LVU386
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1436               		.loc 2 173 2 view .LVU387
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 1437               		.loc 2 174 2 view .LVU388
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 1438               		.loc 2 184 3 view .LVU389
 1439               		.loc 2 187 2 view .LVU390
 1440 01a0 FFEF      		ldi r31,lo8(255999)
 1441 01a2 27EE      		ldi r18,hi8(255999)
 1442 01a4 33E0      		ldi r19,hlo8(255999)
 1443 01a6 F150      	1:	subi r31,1
 1444 01a8 2040      		sbci r18,0
 1445 01aa 3040      		sbci r19,0
 1446 01ac 01F4      		brne 1b
 1447               	.LVL167:
 1448               	.L202:
 1449               		.loc 2 187 2 is_stmt 0 view .LVU391
 1450               	.LBE35:
 1451               	.LBE34:
 1452               	.LBE36:
 1453               	.LBB37:
 1454               	.LBB38:
 1455 01ae 00C0      		rjmp .
 1456 01b0 0000      		nop
 1457               	.L153:
 1458               	.LBE38:
 1459               	.LBE37:
 546:tmk_core/common/action.c ****                         } else {
 1460               		.loc 1 546 29 is_stmt 1 view .LVU392
 1461 01b2 8D2F      		mov r24,r29
 1462 01b4 0E94 0000 		call unregister_code
 1463               	.LVL168:
 1464 01b8 00C0      		rjmp .L76
 1465               	.L85:
 354:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1466               		.loc 1 354 13 view .LVU393
 354:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1467               		.loc 1 354 33 is_stmt 0 view .LVU394
 1468 01ba 8C2F      		mov r24,r28
 1469 01bc 8695      		lsr r24
 1470 01be 8695      		lsr r24
 1471 01c0 8370      		andi r24,lo8(3)
 1472 01c2 01F0      		breq .L113
 1473 01c4 8130      		cpi r24,lo8(1)
 1474 01c6 01F0      		breq .+2
 1475 01c8 00C0      		rjmp .L76
 363:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1476               		.loc 1 363 21 is_stmt 1 view .LVU395
 364:tmk_core/common/action.c ****                     } else {
 1477               		.loc 1 364 25 is_stmt 0 view .LVU396
 1478 01ca 8D2F      		mov r24,r29
 1479 01cc 9C2F      		mov r25,r28
 1480 01ce 9370      		andi r25,lo8(3)
 363:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1481               		.loc 1 363 24 view .LVU397
 1482 01d0 1111      		cpse r17,__zero_reg__
 1483 01d2 00C0      		rjmp .L200
 366:tmk_core/common/action.c ****                     }
 1484               		.loc 1 366 25 is_stmt 1 view .LVU398
 1485 01d4 90E0      		ldi r25,0
 1486 01d6 80E0      		ldi r24,0
 1487               	.L200:
 1488 01d8 0E94 0000 		call host_consumer_send
 1489               	.LVL169:
 1490 01dc 00C0      		rjmp .L76
 1491               	.L113:
 356:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1492               		.loc 1 356 21 view .LVU399
 357:tmk_core/common/action.c ****                     } else {
 1493               		.loc 1 357 25 is_stmt 0 view .LVU400
 1494 01de 8D2F      		mov r24,r29
 1495 01e0 9C2F      		mov r25,r28
 1496 01e2 9370      		andi r25,lo8(3)
 356:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1497               		.loc 1 356 24 view .LVU401
 1498 01e4 1111      		cpse r17,__zero_reg__
 1499 01e6 00C0      		rjmp .L194
 359:tmk_core/common/action.c ****                     }
 1500               		.loc 1 359 25 is_stmt 1 view .LVU402
 1501 01e8 90E0      		ldi r25,0
 1502 01ea 80E0      		ldi r24,0
 1503               	.L194:
 1504 01ec 0E94 0000 		call host_system_send
 1505               	.LVL170:
 1506 01f0 00C0      		rjmp .L76
 1507               	.L84:
 375:tmk_core/common/action.c ****                 switch (action.key.code) {
 1508               		.loc 1 375 13 view .LVU403
 375:tmk_core/common/action.c ****                 switch (action.key.code) {
 1509               		.loc 1 375 16 is_stmt 0 view .LVU404
 1510 01f2 1123      		tst r17
 1511 01f4 01F0      		breq .L117
 376:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 1512               		.loc 1 376 17 is_stmt 1 view .LVU405
 1513 01f6 D53F      		cpi r29,lo8(-11)
 1514 01f8 01F0      		breq .L118
 1515 01fa D63F      		cpi r29,lo8(-10)
 1516 01fc 01F0      		breq .L119
 1517 01fe D43F      		cpi r29,lo8(-12)
 1518 0200 01F4      		brne .L120
 378:tmk_core/common/action.c ****                         break;
 1519               		.loc 1 378 25 view .LVU406
 378:tmk_core/common/action.c ****                         break;
 1520               		.loc 1 378 36 is_stmt 0 view .LVU407
 1521 0202 8091 0000 		lds r24,tp_buttons
 1522 0206 9091 0000 		lds r25,tp_buttons+1
 1523 020a 8160      		ori r24,1
 1524               	.L191:
 384:tmk_core/common/action.c ****                         break;
 1525               		.loc 1 384 36 view .LVU408
 1526 020c 9093 0000 		sts tp_buttons+1,r25
 1527 0210 8093 0000 		sts tp_buttons,r24
 385:tmk_core/common/action.c ****                     default:
 1528               		.loc 1 385 25 is_stmt 1 view .LVU409
 1529               	.L120:
 389:tmk_core/common/action.c ****                 mousekey_send();
 1530               		.loc 1 389 17 view .LVU410
 1531 0214 8D2F      		mov r24,r29
 1532 0216 0E94 0000 		call mousekey_on
 1533               	.LVL171:
 390:tmk_core/common/action.c ****             } else {
 1534               		.loc 1 390 17 view .LVU411
 1535               	.L195:
 406:tmk_core/common/action.c ****             }
 1536               		.loc 1 406 17 view .LVU412
 1537 021a 0E94 0000 		call mousekey_send
 1538               	.LVL172:
 1539 021e 00C0      		rjmp .L76
 1540               	.L118:
 381:tmk_core/common/action.c ****                         break;
 1541               		.loc 1 381 25 view .LVU413
 381:tmk_core/common/action.c ****                         break;
 1542               		.loc 1 381 36 is_stmt 0 view .LVU414
 1543 0220 8091 0000 		lds r24,tp_buttons
 1544 0224 9091 0000 		lds r25,tp_buttons+1
 1545 0228 8260      		ori r24,2
 1546 022a 00C0      		rjmp .L191
 1547               	.L119:
 384:tmk_core/common/action.c ****                         break;
 1548               		.loc 1 384 25 is_stmt 1 view .LVU415
 384:tmk_core/common/action.c ****                         break;
 1549               		.loc 1 384 36 is_stmt 0 view .LVU416
 1550 022c 8091 0000 		lds r24,tp_buttons
 1551 0230 9091 0000 		lds r25,tp_buttons+1
 1552 0234 8460      		ori r24,4
 1553 0236 00C0      		rjmp .L191
 1554               	.L117:
 392:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 1555               		.loc 1 392 17 is_stmt 1 view .LVU417
 1556 0238 D53F      		cpi r29,lo8(-11)
 1557 023a 01F0      		breq .L121
 1558 023c D63F      		cpi r29,lo8(-10)
 1559 023e 01F0      		breq .L122
 1560 0240 D43F      		cpi r29,lo8(-12)
 1561 0242 01F4      		brne .L123
 394:tmk_core/common/action.c ****                         break;
 1562               		.loc 1 394 25 view .LVU418
 394:tmk_core/common/action.c ****                         break;
 1563               		.loc 1 394 36 is_stmt 0 view .LVU419
 1564 0244 8091 0000 		lds r24,tp_buttons
 1565 0248 9091 0000 		lds r25,tp_buttons+1
 1566 024c 8E7F      		andi r24,254
 1567               	.L192:
 400:tmk_core/common/action.c ****                         break;
 1568               		.loc 1 400 36 view .LVU420
 1569 024e 9093 0000 		sts tp_buttons+1,r25
 1570 0252 8093 0000 		sts tp_buttons,r24
 401:tmk_core/common/action.c ****                     default:
 1571               		.loc 1 401 25 is_stmt 1 view .LVU421
 1572               	.L123:
 405:tmk_core/common/action.c ****                 mousekey_send();
 1573               		.loc 1 405 17 view .LVU422
 1574 0256 8D2F      		mov r24,r29
 1575 0258 0E94 0000 		call mousekey_off
 1576               	.LVL173:
 1577 025c 00C0      		rjmp .L195
 1578               	.L121:
 397:tmk_core/common/action.c ****                         break;
 1579               		.loc 1 397 25 view .LVU423
 397:tmk_core/common/action.c ****                         break;
 1580               		.loc 1 397 36 is_stmt 0 view .LVU424
 1581 025e 8091 0000 		lds r24,tp_buttons
 1582 0262 9091 0000 		lds r25,tp_buttons+1
 1583 0266 8D7F      		andi r24,253
 1584 0268 00C0      		rjmp .L192
 1585               	.L122:
 400:tmk_core/common/action.c ****                         break;
 1586               		.loc 1 400 25 is_stmt 1 view .LVU425
 400:tmk_core/common/action.c ****                         break;
 1587               		.loc 1 400 36 is_stmt 0 view .LVU426
 1588 026a 8091 0000 		lds r24,tp_buttons
 1589 026e 9091 0000 		lds r25,tp_buttons+1
 1590 0272 8B7F      		andi r24,251
 1591 0274 00C0      		rjmp .L192
 1592               	.L83:
 412:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1593               		.loc 1 412 13 is_stmt 1 view .LVU427
 412:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1594               		.loc 1 412 39 is_stmt 0 view .LVU428
 1595 0276 8C2F      		mov r24,r28
 1596 0278 8370      		andi r24,lo8(3)
 412:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1597               		.loc 1 412 16 view .LVU429
 1598 027a 01F0      		breq .+2
 1599 027c 00C0      		rjmp .L124
 414:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1600               		.loc 1 414 17 is_stmt 1 view .LVU430
 414:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1601               		.loc 1 414 20 is_stmt 0 view .LVU431
 1602 027e 1111      		cpse r17,__zero_reg__
 1603 0280 00C0      		rjmp .L76
 1604               	.LBB40:
 415:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1605               		.loc 1 415 21 is_stmt 1 view .LVU432
 1606               	.LVL174:
 416:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1607               		.loc 1 416 21 view .LVU433
 415:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1608               		.loc 1 415 61 is_stmt 0 view .LVU434
 1609 0282 4D2F      		mov r20,r29
 1610 0284 4295      		swap r20
 1611 0286 4695      		lsr r20
 1612 0288 4770      		andi r20,lo8(7)
 415:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1613               		.loc 1 415 35 view .LVU435
 1614 028a 440F      		lsl r20
 1615 028c 440F      		lsl r20
 416:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1616               		.loc 1 416 77 view .LVU436
 1617 028e 0D2F      		mov r16,r29
 1618               	.LVL175:
 416:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1619               		.loc 1 416 77 view .LVU437
 1620 0290 0F70      		andi r16,lo8(15)
 416:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1621               		.loc 1 416 44 view .LVU438
 1622 0292 10E0      		ldi r17,0
 1623               	.LVL176:
 416:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1624               		.loc 1 416 44 view .LVU439
 1625 0294 30E0      		ldi r19,0
 1626 0296 20E0      		ldi r18,0
 416:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1627               		.loc 1 416 35 view .LVU440
 1628 0298 042E      		mov r0,r20
 1629 029a 00C0      		rjmp 2f
 1630               		1:
 1631 029c 000F      		lsl r16
 1632 029e 111F      		rol r17
 1633 02a0 221F      		rol r18
 1634 02a2 331F      		rol r19
 1635               		2:
 1636 02a4 0A94      		dec r0
 1637 02a6 02F4      		brpl 1b
 1638               	.LVL177:
 417:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1639               		.loc 1 417 21 is_stmt 1 view .LVU441
 417:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1640               		.loc 1 417 104 is_stmt 0 view .LVU442
 1641 02a8 60E0      		ldi r22,0
 1642 02aa 70E0      		ldi r23,0
 1643 02ac CB01      		movw r24,r22
 1644 02ae D4FF      		sbrs r29,4
 1645 02b0 00C0      		rjmp .L125
 417:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1646               		.loc 1 417 94 discriminator 1 view .LVU443
 1647 02b2 6FE0      		ldi r22,lo8(15)
 1648 02b4 70E0      		ldi r23,0
 1649 02b6 80E0      		ldi r24,0
 1650 02b8 90E0      		ldi r25,0
 1651 02ba 00C0      		rjmp 2f
 1652               		1:
 1653 02bc 660F      		lsl r22
 1654 02be 771F      		rol r23
 1655 02c0 881F      		rol r24
 1656 02c2 991F      		rol r25
 1657               		2:
 1658 02c4 4A95      		dec r20
 1659 02c6 02F4      		brpl 1b
 417:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1660               		.loc 1 417 104 discriminator 1 view .LVU444
 1661 02c8 6095      		com r22
 1662 02ca 7095      		com r23
 1663 02cc 8095      		com r24
 1664 02ce 9095      		com r25
 1665               	.L125:
 1666               	.LVL178:
 418:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1667               		.loc 1 418 21 is_stmt 1 discriminator 4 view .LVU445
 418:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1668               		.loc 1 418 47 is_stmt 0 discriminator 4 view .LVU446
 1669 02d0 C695      		lsr r28
 1670 02d2 C695      		lsr r28
 1671               	.LVL179:
 418:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1672               		.loc 1 418 47 discriminator 4 view .LVU447
 1673 02d4 C370      		andi r28,lo8(3)
 1674 02d6 602B      		or r22,r16
 1675               	.LVL180:
 418:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1676               		.loc 1 418 47 discriminator 4 view .LVU448
 1677 02d8 712B      		or r23,r17
 1678 02da 822B      		or r24,r18
 1679 02dc 932B      		or r25,r19
 1680 02de C230      		cpi r28,lo8(2)
 1681 02e0 01F0      		breq .L126
 1682 02e2 00F4      		brsh .L127
 1683 02e4 C130      		cpi r28,lo8(1)
 1684 02e6 01F0      		breq .L128
 420:tmk_core/common/action.c ****                             break;
 1685               		.loc 1 420 29 is_stmt 1 view .LVU449
 1686 02e8 0E94 0000 		call default_layer_and
 1687               	.LVL181:
 421:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1688               		.loc 1 421 29 view .LVU450
 1689 02ec 00C0      		rjmp .L76
 1690               	.L128:
 423:tmk_core/common/action.c ****                             break;
 1691               		.loc 1 423 29 view .LVU451
 1692 02ee 0E94 0000 		call default_layer_or
 1693               	.LVL182:
 424:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1694               		.loc 1 424 29 view .LVU452
 1695 02f2 00C0      		rjmp .L76
 1696               	.L126:
 426:tmk_core/common/action.c ****                             break;
 1697               		.loc 1 426 29 view .LVU453
 1698 02f4 0E94 0000 		call default_layer_xor
 1699               	.LVL183:
 427:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1700               		.loc 1 427 29 view .LVU454
 1701 02f8 00C0      		rjmp .L76
 1702               	.L127:
 429:tmk_core/common/action.c ****                             break;
 1703               		.loc 1 429 29 view .LVU455
 1704 02fa 0E94 0000 		call default_layer_set
 1705               	.LVL184:
 430:tmk_core/common/action.c ****                     }
 1706               		.loc 1 430 29 view .LVU456
 1707 02fe 00C0      		rjmp .L76
 1708               	.LVL185:
 1709               	.L124:
 430:tmk_core/common/action.c ****                     }
 1710               		.loc 1 430 29 is_stmt 0 view .LVU457
 1711               	.LBE40:
 435:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1712               		.loc 1 435 17 is_stmt 1 view .LVU458
 435:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1713               		.loc 1 435 21 is_stmt 0 view .LVU459
 1714 0300 8695      		lsr r24
 1715 0302 1123      		tst r17
 1716 0304 01F0      		breq .L130
 435:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1717               		.loc 1 435 21 discriminator 1 view .LVU460
 1718 0306 8C2F      		mov r24,r28
 1719 0308 8170      		andi r24,lo8(1)
 1720               	.L130:
 435:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1721               		.loc 1 435 20 discriminator 4 view .LVU461
 1722 030a 8823      		tst r24
 1723 030c 01F4      		brne .+2
 1724 030e 00C0      		rjmp .L76
 1725               	.LBB41:
 436:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1726               		.loc 1 436 21 is_stmt 1 view .LVU462
 1727               	.LVL186:
 437:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1728               		.loc 1 437 21 view .LVU463
 436:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1729               		.loc 1 436 61 is_stmt 0 view .LVU464
 1730 0310 4D2F      		mov r20,r29
 1731 0312 4295      		swap r20
 1732 0314 4695      		lsr r20
 1733 0316 4770      		andi r20,lo8(7)
 436:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1734               		.loc 1 436 35 view .LVU465
 1735 0318 440F      		lsl r20
 1736 031a 440F      		lsl r20
 437:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1737               		.loc 1 437 77 view .LVU466
 1738 031c 0D2F      		mov r16,r29
 1739               	.LVL187:
 437:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1740               		.loc 1 437 77 view .LVU467
 1741 031e 0F70      		andi r16,lo8(15)
 437:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1742               		.loc 1 437 44 view .LVU468
 1743 0320 10E0      		ldi r17,0
 1744               	.LVL188:
 437:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1745               		.loc 1 437 44 view .LVU469
 1746 0322 30E0      		ldi r19,0
 1747 0324 20E0      		ldi r18,0
 437:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1748               		.loc 1 437 35 view .LVU470
 1749 0326 042E      		mov r0,r20
 1750 0328 00C0      		rjmp 2f
 1751               		1:
 1752 032a 000F      		lsl r16
 1753 032c 111F      		rol r17
 1754 032e 221F      		rol r18
 1755 0330 331F      		rol r19
 1756               		2:
 1757 0332 0A94      		dec r0
 1758 0334 02F4      		brpl 1b
 1759               	.LVL189:
 438:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1760               		.loc 1 438 21 is_stmt 1 view .LVU471
 438:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1761               		.loc 1 438 104 is_stmt 0 view .LVU472
 1762 0336 60E0      		ldi r22,0
 1763 0338 70E0      		ldi r23,0
 1764 033a CB01      		movw r24,r22
 1765 033c D4FF      		sbrs r29,4
 1766 033e 00C0      		rjmp .L131
 438:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1767               		.loc 1 438 94 discriminator 1 view .LVU473
 1768 0340 6FE0      		ldi r22,lo8(15)
 1769 0342 70E0      		ldi r23,0
 1770 0344 80E0      		ldi r24,0
 1771 0346 90E0      		ldi r25,0
 1772 0348 00C0      		rjmp 2f
 1773               		1:
 1774 034a 660F      		lsl r22
 1775 034c 771F      		rol r23
 1776 034e 881F      		rol r24
 1777 0350 991F      		rol r25
 1778               		2:
 1779 0352 4A95      		dec r20
 1780 0354 02F4      		brpl 1b
 438:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1781               		.loc 1 438 104 discriminator 1 view .LVU474
 1782 0356 6095      		com r22
 1783 0358 7095      		com r23
 1784 035a 8095      		com r24
 1785 035c 9095      		com r25
 1786               	.L131:
 1787               	.LVL190:
 439:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1788               		.loc 1 439 21 is_stmt 1 discriminator 4 view .LVU475
 439:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1789               		.loc 1 439 47 is_stmt 0 discriminator 4 view .LVU476
 1790 035e C695      		lsr r28
 1791 0360 C695      		lsr r28
 1792               	.LVL191:
 439:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1793               		.loc 1 439 47 discriminator 4 view .LVU477
 1794 0362 C370      		andi r28,lo8(3)
 1795 0364 602B      		or r22,r16
 1796               	.LVL192:
 439:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1797               		.loc 1 439 47 discriminator 4 view .LVU478
 1798 0366 712B      		or r23,r17
 1799 0368 822B      		or r24,r18
 1800 036a 932B      		or r25,r19
 1801 036c C230      		cpi r28,lo8(2)
 1802 036e 01F0      		breq .L132
 1803 0370 00F4      		brsh .L133
 1804 0372 C130      		cpi r28,lo8(1)
 1805 0374 01F0      		breq .L134
 441:tmk_core/common/action.c ****                             break;
 1806               		.loc 1 441 29 is_stmt 1 view .LVU479
 1807 0376 0E94 0000 		call layer_and
 1808               	.LVL193:
 442:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1809               		.loc 1 442 29 view .LVU480
 1810 037a 00C0      		rjmp .L76
 1811               	.L134:
 444:tmk_core/common/action.c ****                             break;
 1812               		.loc 1 444 29 view .LVU481
 1813 037c 0E94 0000 		call layer_or
 1814               	.LVL194:
 445:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1815               		.loc 1 445 29 view .LVU482
 1816 0380 00C0      		rjmp .L76
 1817               	.L132:
 447:tmk_core/common/action.c ****                             break;
 1818               		.loc 1 447 29 view .LVU483
 1819 0382 0E94 0000 		call layer_xor
 1820               	.LVL195:
 448:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1821               		.loc 1 448 29 view .LVU484
 1822 0386 00C0      		rjmp .L76
 1823               	.L133:
 450:tmk_core/common/action.c ****                             break;
 1824               		.loc 1 450 29 view .LVU485
 1825 0388 0E94 0000 		call layer_state_set
 1826               	.LVL196:
 451:tmk_core/common/action.c ****                     }
 1827               		.loc 1 451 29 view .LVU486
 1828 038c 00C0      		rjmp .L76
 1829               	.LVL197:
 1830               	.L82:
 451:tmk_core/common/action.c ****                     }
 1831               		.loc 1 451 29 is_stmt 0 view .LVU487
 1832               	.LBE41:
 457:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1833               		.loc 1 457 13 is_stmt 1 view .LVU488
 1834 038e CF70      		andi r28,lo8(15)
 1835               	.LVL198:
 457:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1836               		.loc 1 457 16 is_stmt 0 view .LVU489
 1837 0390 1123      		tst r17
 1838 0392 01F0      		breq .L135
 458:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 1839               		.loc 1 458 17 is_stmt 1 view .LVU490
 1840 0394 8C2F      		mov r24,r28
 1841 0396 0E94 0000 		call layer_on
 1842               	.LVL199:
 459:tmk_core/common/action.c ****             } else {
 1843               		.loc 1 459 17 view .LVU491
 1844 039a 8D2F      		mov r24,r29
 1845 039c 00C0      		rjmp .L197
 1846               	.L135:
 461:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 1847               		.loc 1 461 17 view .LVU492
 1848 039e 8D2F      		mov r24,r29
 1849 03a0 0E94 0000 		call unregister_mods
 1850               	.LVL200:
 462:tmk_core/common/action.c ****             }
 1851               		.loc 1 462 17 view .LVU493
 1852 03a4 8C2F      		mov r24,r28
 1853               	.LVL201:
 1854               	.L193:
 549:tmk_core/common/action.c ****                         }
 1855               		.loc 1 549 29 is_stmt 0 view .LVU494
 1856 03a6 0E94 0000 		call layer_off
 1857               	.LVL202:
 1858 03aa 00C0      		rjmp .L76
 1859               	.L81:
 468:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1860               		.loc 1 468 13 is_stmt 1 view .LVU495
 1861 03ac D23F      		cpi r29,lo8(-14)
 1862 03ae 01F0      		breq .L136
 1863 03b0 00F4      		brsh .L137
 1864 03b2 D03F      		cpi r29,lo8(-16)
 1865 03b4 01F0      		breq .L138
 1866 03b6 D13F      		cpi r29,lo8(-15)
 1867 03b8 01F0      		breq .L139
 1868               	.L140:
 530:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1869               		.loc 1 530 21 view .LVU496
 530:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1870               		.loc 1 530 24 is_stmt 0 view .LVU497
 1871 03ba 1123      		tst r17
 1872 03bc 01F4      		brne .+2
 1873 03be 00C0      		rjmp .L149
 531:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1874               		.loc 1 531 25 is_stmt 1 view .LVU498
 531:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1875               		.loc 1 531 28 is_stmt 0 view .LVU499
 1876 03c0 0111      		cpse r16,__zero_reg__
 1877 03c2 00C0      		rjmp .L198
 535:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1878               		.loc 1 535 76 is_stmt 1 view .LVU500
 536:tmk_core/common/action.c ****                         }
 1879               		.loc 1 536 29 view .LVU501
 1880 03c4 8C2F      		mov r24,r28
 1881 03c6 8F71      		andi r24,lo8(31)
 1882 03c8 00C0      		rjmp .L196
 1883               	.L137:
 1884 03ca D33F      		cpi r29,lo8(-13)
 1885 03cc 01F0      		breq .L141
 1886 03ce D43F      		cpi r29,lo8(-12)
 1887 03d0 01F4      		brne .L140
 516:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1888               		.loc 1 516 21 view .LVU502
 516:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1889               		.loc 1 516 24 is_stmt 0 view .LVU503
 1890 03d2 1123      		tst r17
 1891 03d4 01F0      		breq .L148
 517:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1892               		.loc 1 517 25 is_stmt 1 view .LVU504
 517:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1893               		.loc 1 517 50 is_stmt 0 view .LVU505
 1894 03d6 CF71      		andi r28,lo8(31)
 1895               	.LVL203:
 517:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1896               		.loc 1 517 25 view .LVU506
 1897 03d8 8C2F      		mov r24,r28
 1898 03da 0E94 0000 		call layer_on
 1899               	.LVL204:
 518:tmk_core/common/action.c ****                     } else {
 1900               		.loc 1 518 25 is_stmt 1 view .LVU507
 1901 03de 63E0      		ldi r22,lo8(3)
 1902 03e0 8C2F      		mov r24,r28
 1903 03e2 0E94 0000 		call set_oneshot_layer
 1904               	.LVL205:
 1905 03e6 00C0      		rjmp .L76
 1906               	.LVL206:
 1907               	.L138:
 471:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1908               		.loc 1 471 21 view .LVU508
 471:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1909               		.loc 1 471 24 is_stmt 0 view .LVU509
 1910 03e8 1123      		tst r17
 1911 03ea 01F0      		breq .L143
 472:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1912               		.loc 1 472 25 is_stmt 1 view .LVU510
 472:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1913               		.loc 1 472 28 is_stmt 0 view .LVU511
 1914 03ec 0530      		cpi r16,lo8(5)
 1915 03ee 00F0      		brlo .+2
 1916 03f0 00C0      		rjmp .L76
 1917               	.L144:
 473:tmk_core/common/action.c ****                         }
 1918               		.loc 1 473 29 is_stmt 1 view .LVU512
 1919 03f2 8C2F      		mov r24,r28
 1920 03f4 8F71      		andi r24,lo8(31)
 1921 03f6 0E94 0000 		call layer_invert
 1922               	.LVL207:
 1923 03fa 00C0      		rjmp .L76
 1924               	.L143:
 476:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1925               		.loc 1 476 25 view .LVU513
 476:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1926               		.loc 1 476 28 is_stmt 0 view .LVU514
 1927 03fc 0630      		cpi r16,lo8(6)
 1928 03fe 00F0      		brlo .+2
 1929 0400 00C0      		rjmp .L76
 1930 0402 00C0      		rjmp .L144
 1931               	.L139:
 482:tmk_core/common/action.c ****                     break;
 1932               		.loc 1 482 21 is_stmt 1 view .LVU515
 1933 0404 8C2F      		mov r24,r28
 1934 0406 8F71      		andi r24,lo8(31)
 482:tmk_core/common/action.c ****                     break;
 1935               		.loc 1 482 68 is_stmt 0 view .LVU516
 1936 0408 1123      		tst r17
 1937 040a 01F0      		breq .L193
 1938               	.L196:
 536:tmk_core/common/action.c ****                         }
 1939               		.loc 1 536 29 view .LVU517
 1940 040c 0E94 0000 		call layer_on
 1941               	.LVL208:
 1942 0410 00C0      		rjmp .L76
 1943               	.L136:
 485:tmk_core/common/action.c ****                     break;
 1944               		.loc 1 485 21 is_stmt 1 view .LVU518
 1945 0412 8C2F      		mov r24,r28
 1946 0414 8F71      		andi r24,lo8(31)
 485:tmk_core/common/action.c ****                     break;
 1947               		.loc 1 485 69 is_stmt 0 view .LVU519
 1948 0416 1123      		tst r17
 1949 0418 01F0      		breq .L196
 1950 041a 00C0      		rjmp .L193
 1951               	.L141:
 488:tmk_core/common/action.c ****                     break;
 1952               		.loc 1 488 21 is_stmt 1 view .LVU520
 488:tmk_core/common/action.c ****                     break;
 1953               		.loc 1 488 70 is_stmt 0 view .LVU521
 1954 041c 1123      		tst r17
 1955 041e 01F0      		breq .L147
 488:tmk_core/common/action.c ****                     break;
 1956               		.loc 1 488 37 discriminator 1 view .LVU522
 1957 0420 8C2F      		mov r24,r28
 1958 0422 8F71      		andi r24,lo8(31)
 1959 0424 0E94 0000 		call layer_move
 1960               	.LVL209:
 1961 0428 00C0      		rjmp .L76
 1962               	.L147:
 488:tmk_core/common/action.c ****                     break;
 1963               		.loc 1 488 72 discriminator 2 view .LVU523
 1964 042a 0E94 0000 		call layer_clear
 1965               	.LVL210:
 1966 042e 00C0      		rjmp .L76
 1967               	.L148:
 520:tmk_core/common/action.c ****                         if (tap_count > 1) {
 1968               		.loc 1 520 25 is_stmt 1 view .LVU524
 1969 0430 81E0      		ldi r24,lo8(1)
 1970 0432 0E94 0000 		call clear_oneshot_layer_state
 1971               	.LVL211:
 521:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1972               		.loc 1 521 25 view .LVU525
 521:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1973               		.loc 1 521 28 is_stmt 0 view .LVU526
 1974 0436 0230      		cpi r16,lo8(2)
 1975 0438 00F4      		brsh .+2
 1976 043a 00C0      		rjmp .L76
 522:tmk_core/common/action.c ****                         }
 1977               		.loc 1 522 29 is_stmt 1 view .LVU527
 1978 043c 82E0      		ldi r24,lo8(2)
 1979 043e 0E94 0000 		call clear_oneshot_layer_state
 1980               	.LVL212:
 1981 0442 00C0      		rjmp .L76
 1982               	.L149:
 539:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1983               		.loc 1 539 25 view .LVU528
 539:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1984               		.loc 1 539 28 is_stmt 0 view .LVU529
 1985 0444 0023      		tst r16
 1986 0446 01F0      		breq .L151
 540:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1987               		.loc 1 540 77 is_stmt 1 view .LVU530
 541:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1988               		.loc 1 541 29 view .LVU531
 541:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1989               		.loc 1 541 32 is_stmt 0 view .LVU532
 1990 0448 D933      		cpi r29,lo8(57)
 1991 044a 01F0      		breq .+2
 1992 044c 00C0      		rjmp .L153
 542:tmk_core/common/action.c ****                             } else {
 1993               		.loc 1 542 33 is_stmt 1 view .LVU533
 1994               	.LVL213:
 1995               	.LBB42:
 1996               	.LBI37:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 1997               		.loc 2 166 1 view .LVU534
 1998               	.LBB39:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1999               		.loc 2 168 2 view .LVU535
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2000               		.loc 2 172 2 view .LVU536
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2001               		.loc 2 173 2 view .LVU537
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 2002               		.loc 2 174 2 view .LVU538
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 2003               		.loc 2 184 3 view .LVU539
 2004               		.loc 2 187 2 view .LVU540
 2005 044e 8FEF      		ldi r24,lo8(255999)
 2006 0450 97EE      		ldi r25,hi8(255999)
 2007 0452 E3E0      		ldi r30,hlo8(255999)
 2008 0454 8150      	1:	subi r24,1
 2009 0456 9040      		sbci r25,0
 2010 0458 E040      		sbci r30,0
 2011 045a 01F4      		brne 1b
 2012 045c 00C0      		rjmp .L202
 2013               	.LVL214:
 2014               	.L151:
 2015               		.loc 2 187 2 is_stmt 0 view .LVU541
 2016               	.LBE39:
 2017               	.LBE42:
 548:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 2018               		.loc 1 548 79 is_stmt 1 view .LVU542
 549:tmk_core/common/action.c ****                         }
 2019               		.loc 1 549 29 view .LVU543
 2020 045e 8C2F      		mov r24,r28
 2021 0460 8F71      		andi r24,lo8(31)
 2022 0462 00C0      		rjmp .L193
 2023               	.L80:
 560:tmk_core/common/action.c ****             break;
 2024               		.loc 1 560 13 view .LVU544
 560:tmk_core/common/action.c ****             break;
 2025               		.loc 1 560 83 is_stmt 0 view .LVU545
 2026 0464 4C2F      		mov r20,r28
 2027 0466 4F70      		andi r20,lo8(15)
 560:tmk_core/common/action.c ****             break;
 2028               		.loc 1 560 13 view .LVU546
 2029 0468 6D2F      		mov r22,r29
 2030 046a C601      		movw r24,r12
 2031 046c 0E94 0000 		call action_get_macro
 2032               	.LVL215:
 2033 0470 0E94 0000 		call action_macro_play
 2034               	.LVL216:
 561:tmk_core/common/action.c **** #endif
 2035               		.loc 1 561 13 is_stmt 1 view .LVU547
 2036 0474 00C0      		rjmp .L76
 2037               	.L79:
 565:tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 2038               		.loc 1 565 13 view .LVU548
 565:tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 2039               		.loc 1 565 16 is_stmt 0 view .LVU549
 2040 0476 1111      		cpse r17,__zero_reg__
 2041 0478 00C0      		rjmp .L76
 566:tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 2042               		.loc 1 566 17 is_stmt 1 view .LVU550
 566:tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 2043               		.loc 1 566 41 is_stmt 0 view .LVU551
 2044 047a CF70      		andi r28,lo8(15)
 2045               	.LVL217:
 566:tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 2046               		.loc 1 566 41 view .LVU552
 2047 047c C230      		cpi r28,lo8(2)
 2048 047e 01F0      		breq .L154
 2049 0480 00F4      		brsh .L155
 2050 0482 CC23      		tst r28
 2051 0484 01F0      		breq .L156
 2052 0486 C130      		cpi r28,lo8(1)
 2053 0488 01F0      		breq .+2
 2054 048a 00C0      		rjmp .L76
 571:tmk_core/common/action.c ****                         break;
 2055               		.loc 1 571 25 is_stmt 1 view .LVU553
 2056 048c 0E94 0000 		call backlight_decrease
 2057               	.LVL218:
 572:tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 2058               		.loc 1 572 25 view .LVU554
 2059 0490 00C0      		rjmp .L76
 2060               	.L155:
 2061 0492 C430      		cpi r28,lo8(4)
 2062 0494 01F0      		breq .L158
 2063 0496 00F0      		brlo .L159
 583:tmk_core/common/action.c ****                         break;
 2064               		.loc 1 583 25 is_stmt 0 view .LVU555
 2065 0498 80E0      		ldi r24,0
 2066 049a C530      		cpi r28,lo8(5)
 2067 049c 01F0      		breq .+2
 2068 049e 00C0      		rjmp .L76
 2069               	.L199:
 2070 04a0 0E94 0000 		call backlight_level
 2071               	.LVL219:
 584:tmk_core/common/action.c ****                 }
 2072               		.loc 1 584 25 is_stmt 1 view .LVU556
 2073 04a4 00C0      		rjmp .L76
 2074               	.L156:
 568:tmk_core/common/action.c ****                         break;
 2075               		.loc 1 568 25 view .LVU557
 2076 04a6 0E94 0000 		call backlight_increase
 2077               	.LVL220:
 569:tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 2078               		.loc 1 569 25 view .LVU558
 2079 04aa 00C0      		rjmp .L76
 2080               	.L154:
 574:tmk_core/common/action.c ****                         break;
 2081               		.loc 1 574 25 view .LVU559
 2082 04ac 0E94 0000 		call backlight_toggle
 2083               	.LVL221:
 575:tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 2084               		.loc 1 575 25 view .LVU560
 2085 04b0 00C0      		rjmp .L76
 2086               	.L159:
 577:tmk_core/common/action.c ****                         break;
 2087               		.loc 1 577 25 view .LVU561
 2088 04b2 0E94 0000 		call backlight_step
 2089               	.LVL222:
 578:tmk_core/common/action.c ****                     case BACKLIGHT_ON:
 2090               		.loc 1 578 25 view .LVU562
 2091 04b6 00C0      		rjmp .L76
 2092               	.L158:
 580:tmk_core/common/action.c ****                         break;
 2093               		.loc 1 580 25 view .LVU563
 2094 04b8 85E0      		ldi r24,lo8(5)
 2095 04ba 00C0      		rjmp .L199
 2096               	.LVL223:
 2097               	.L77:
 656:tmk_core/common/action.c ****             break;
 2098               		.loc 1 656 13 view .LVU564
 656:tmk_core/common/action.c ****             break;
 2099               		.loc 1 656 64 is_stmt 0 view .LVU565
 2100 04bc 4C2F      		mov r20,r28
 2101 04be 4F70      		andi r20,lo8(15)
 656:tmk_core/common/action.c ****             break;
 2102               		.loc 1 656 13 view .LVU566
 2103 04c0 6D2F      		mov r22,r29
 2104 04c2 C601      		movw r24,r12
 2105 04c4 0E94 0000 		call action_function
 2106               	.LVL224:
 657:tmk_core/common/action.c **** #endif
 2107               		.loc 1 657 13 is_stmt 1 view .LVU567
 2108 04c8 00C0      		rjmp .L76
 2109               	.LVL225:
 2110               	.L73:
 2111               	/* epilogue start */
 714:tmk_core/common/action.c **** 
 2112               		.loc 1 714 1 is_stmt 0 view .LVU568
 2113 04ca DF91      		pop r29
 2114               	.LVL226:
 714:tmk_core/common/action.c **** 
 2115               		.loc 1 714 1 view .LVU569
 2116 04cc CF91      		pop r28
 714:tmk_core/common/action.c **** 
 2117               		.loc 1 714 1 view .LVU570
 2118 04ce 1F91      		pop r17
 2119 04d0 0F91      		pop r16
 2120 04d2 FF90      		pop r15
 2121 04d4 EF90      		pop r14
 2122               	.LVL227:
 714:tmk_core/common/action.c **** 
 2123               		.loc 1 714 1 view .LVU571
 2124 04d6 DF90      		pop r13
 2125 04d8 CF90      		pop r12
 2126               	.LVL228:
 714:tmk_core/common/action.c **** 
 2127               		.loc 1 714 1 view .LVU572
 2128 04da BF90      		pop r11
 2129 04dc 0895      		ret
 2130               		.cfi_endproc
 2131               	.LFE111:
 2133               		.section	.text.process_record,"ax",@progbits
 2134               	.global	process_record
 2136               	process_record:
 2137               	.LVL229:
 2138               	.LFB110:
 179:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 2139               		.loc 1 179 42 is_stmt 1 view -0
 2140               		.cfi_startproc
 179:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 2141               		.loc 1 179 42 is_stmt 0 view .LVU574
 2142 0000 0F93      		push r16
 2143               	.LCFI14:
 2144               		.cfi_def_cfa_offset 3
 2145               		.cfi_offset 16, -2
 2146 0002 1F93      		push r17
 2147               	.LCFI15:
 2148               		.cfi_def_cfa_offset 4
 2149               		.cfi_offset 17, -3
 2150 0004 CF93      		push r28
 2151               	.LCFI16:
 2152               		.cfi_def_cfa_offset 5
 2153               		.cfi_offset 28, -4
 2154 0006 DF93      		push r29
 2155               	.LCFI17:
 2156               		.cfi_def_cfa_offset 6
 2157               		.cfi_offset 29, -5
 2158               	/* prologue: function */
 2159               	/* frame size = 0 */
 2160               	/* stack size = 4 */
 2161               	.L__stack_usage = 4
 2162 0008 EC01      		movw r28,r24
 180:tmk_core/common/action.c ****         return;
 2163               		.loc 1 180 5 is_stmt 1 view .LVU575
 2164               	.LBB45:
 2165               	.LBI45:
 2166               		.file 3 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  25:tmk_core/common/keyboard.h **** extern "C" {
  26:tmk_core/common/keyboard.h **** #endif
  27:tmk_core/common/keyboard.h **** 
  28:tmk_core/common/keyboard.h **** /* key matrix position */
  29:tmk_core/common/keyboard.h **** typedef struct {
  30:tmk_core/common/keyboard.h ****     uint8_t col;
  31:tmk_core/common/keyboard.h ****     uint8_t row;
  32:tmk_core/common/keyboard.h **** } keypos_t;
  33:tmk_core/common/keyboard.h **** 
  34:tmk_core/common/keyboard.h **** /* key event */
  35:tmk_core/common/keyboard.h **** typedef struct {
  36:tmk_core/common/keyboard.h ****     keypos_t key;
  37:tmk_core/common/keyboard.h ****     bool     pressed;
  38:tmk_core/common/keyboard.h ****     uint16_t time;
  39:tmk_core/common/keyboard.h **** } keyevent_t;
  40:tmk_core/common/keyboard.h **** 
  41:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  42:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb) ((keya).row == (keyb).row && (keya).col == (keyb).col)
  43:tmk_core/common/keyboard.h **** 
  44:tmk_core/common/keyboard.h **** /* Rules for No Event:
  45:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  46:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  47:tmk_core/common/keyboard.h ****  */
  48:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 2167               		.loc 3 48 20 view .LVU576
 2168               	.LBB46:
 2169               		.loc 3 48 51 view .LVU577
 2170               		.loc 3 48 74 is_stmt 0 view .LVU578
 2171 000a 8B81      		ldd r24,Y+3
 2172 000c 9C81      		ldd r25,Y+4
 2173               	.LVL230:
 2174               		.loc 3 48 74 view .LVU579
 2175 000e 892B      		or r24,r25
 2176 0010 01F0      		breq .L203
 2177 0012 8881      		ld r24,Y
 2178 0014 9981      		ldd r25,Y+1
 2179 0016 8923      		and r24,r25
 2180 0018 8F3F      		cpi r24,lo8(-1)
 2181 001a 01F4      		brne .L213
 2182               	.L203:
 2183               	/* epilogue start */
 2184               	.LBE46:
 2185               	.LBE45:
 198:tmk_core/common/action.c **** 
 2186               		.loc 1 198 1 view .LVU580
 2187 001c DF91      		pop r29
 2188 001e CF91      		pop r28
 2189               	.LVL231:
 198:tmk_core/common/action.c **** 
 2190               		.loc 1 198 1 view .LVU581
 2191 0020 1F91      		pop r17
 2192 0022 0F91      		pop r16
 2193 0024 0895      		ret
 2194               	.LVL232:
 2195               	.L213:
 184:tmk_core/common/action.c **** 
 2196               		.loc 1 184 5 is_stmt 1 view .LVU582
 184:tmk_core/common/action.c **** 
 2197               		.loc 1 184 10 is_stmt 0 view .LVU583
 2198 0026 CE01      		movw r24,r28
 2199 0028 0E94 0000 		call process_record_quantum
 2200               	.LVL233:
 184:tmk_core/common/action.c **** 
 2201               		.loc 1 184 8 view .LVU584
 2202 002c 8823      		tst r24
 2203 002e 01F0      		breq .L203
 186:tmk_core/common/action.c ****     dprint("ACTION: ");
 2204               		.loc 1 186 5 is_stmt 1 view .LVU585
 186:tmk_core/common/action.c ****     dprint("ACTION: ");
 2205               		.loc 1 186 23 is_stmt 0 view .LVU586
 2206 0030 6881      		ld r22,Y
 2207 0032 7981      		ldd r23,Y+1
 2208 0034 8A81      		ldd r24,Y+2
 2209 0036 0E94 0000 		call store_or_get_action
 2210               	.LVL234:
 2211 003a 8C01      		movw r16,r24
 2212               	.LVL235:
 187:tmk_core/common/action.c ****     debug_action(action);
 2213               		.loc 1 187 23 is_stmt 1 view .LVU587
 188:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 2214               		.loc 1 188 5 view .LVU588
 190:tmk_core/common/action.c ****     layer_debug();
 2215               		.loc 1 190 29 view .LVU589
 191:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 2216               		.loc 1 191 5 view .LVU590
 2217 003c 0E94 0000 		call layer_debug
 2218               	.LVL236:
 192:tmk_core/common/action.c ****     default_layer_debug();
 2219               		.loc 1 192 37 view .LVU591
 193:tmk_core/common/action.c **** #endif
 2220               		.loc 1 193 5 view .LVU592
 2221 0040 0E94 0000 		call default_layer_debug
 2222               	.LVL237:
 195:tmk_core/common/action.c **** 
 2223               		.loc 1 195 15 view .LVU593
 197:tmk_core/common/action.c **** }
 2224               		.loc 1 197 5 view .LVU594
 197:tmk_core/common/action.c **** }
 2225               		.loc 1 197 5 is_stmt 0 view .LVU595
 2226 0044 B801      		movw r22,r16
 2227 0046 CE01      		movw r24,r28
 2228               	/* epilogue start */
 198:tmk_core/common/action.c **** 
 2229               		.loc 1 198 1 view .LVU596
 2230 0048 DF91      		pop r29
 2231 004a CF91      		pop r28
 2232               	.LVL238:
 198:tmk_core/common/action.c **** 
 2233               		.loc 1 198 1 view .LVU597
 2234 004c 1F91      		pop r17
 2235 004e 0F91      		pop r16
 2236               	.LVL239:
 197:tmk_core/common/action.c **** }
 2237               		.loc 1 197 5 view .LVU598
 2238 0050 0C94 0000 		jmp process_action
 2239               	.LVL240:
 197:tmk_core/common/action.c **** }
 2240               		.loc 1 197 5 view .LVU599
 2241               		.cfi_endproc
 2242               	.LFE110:
 2244               		.section	.text.process_record_nocache,"ax",@progbits
 2245               	.global	process_record_nocache
 2247               	process_record_nocache:
 2248               	.LVL241:
 2249               	.LFB107:
 141:tmk_core/common/action.c ****     disable_action_cache = true;
 2250               		.loc 1 141 50 is_stmt 1 view -0
 2251               		.cfi_startproc
 2252               	/* prologue: function */
 2253               	/* frame size = 0 */
 2254               	/* stack size = 0 */
 2255               	.L__stack_usage = 0
 142:tmk_core/common/action.c ****     process_record(record);
 2256               		.loc 1 142 5 view .LVU601
 142:tmk_core/common/action.c ****     process_record(record);
 2257               		.loc 1 142 26 is_stmt 0 view .LVU602
 2258 0000 21E0      		ldi r18,lo8(1)
 2259 0002 2093 0000 		sts disable_action_cache,r18
 143:tmk_core/common/action.c ****     disable_action_cache = false;
 2260               		.loc 1 143 5 is_stmt 1 view .LVU603
 2261 0006 0E94 0000 		call process_record
 2262               	.LVL242:
 144:tmk_core/common/action.c **** }
 2263               		.loc 1 144 5 view .LVU604
 144:tmk_core/common/action.c **** }
 2264               		.loc 1 144 26 is_stmt 0 view .LVU605
 2265 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 2266               	/* epilogue start */
 145:tmk_core/common/action.c **** #else
 2267               		.loc 1 145 1 view .LVU606
 2268 000e 0895      		ret
 2269               		.cfi_endproc
 2270               	.LFE107:
 2272               		.section	.text.register_weak_mods,"ax",@progbits
 2273               	.global	register_weak_mods
 2275               	register_weak_mods:
 2276               	.LVL243:
 2277               	.LFB117:
 903:tmk_core/common/action.c **** 
 904:tmk_core/common/action.c **** /** \brief Adds the given weak modifiers and sends a keyboard report immediately.
 905:tmk_core/common/action.c ****  *
 906:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 907:tmk_core/common/action.c ****  */
 908:tmk_core/common/action.c **** void register_weak_mods(uint8_t mods) {
 2278               		.loc 1 908 39 is_stmt 1 view -0
 2279               		.cfi_startproc
 2280               	/* prologue: function */
 2281               	/* frame size = 0 */
 2282               	/* stack size = 0 */
 2283               	.L__stack_usage = 0
 909:tmk_core/common/action.c ****     if (mods) {
 2284               		.loc 1 909 5 view .LVU608
 2285               		.loc 1 909 8 is_stmt 0 view .LVU609
 2286 0000 8823      		tst r24
 2287 0002 01F0      		breq .L215
 910:tmk_core/common/action.c ****         add_weak_mods(mods);
 2288               		.loc 1 910 9 is_stmt 1 view .LVU610
 2289 0004 0E94 0000 		call add_weak_mods
 2290               	.LVL244:
 911:tmk_core/common/action.c ****         send_keyboard_report();
 2291               		.loc 1 911 9 view .LVU611
 2292 0008 0C94 0000 		jmp send_keyboard_report
 2293               	.LVL245:
 2294               	.L215:
 2295               	/* epilogue start */
 912:tmk_core/common/action.c ****     }
 913:tmk_core/common/action.c **** }
 2296               		.loc 1 913 1 is_stmt 0 view .LVU612
 2297 000c 0895      		ret
 2298               		.cfi_endproc
 2299               	.LFE117:
 2301               		.section	.text.unregister_weak_mods,"ax",@progbits
 2302               	.global	unregister_weak_mods
 2304               	unregister_weak_mods:
 2305               	.LVL246:
 2306               	.LFB118:
 914:tmk_core/common/action.c **** 
 915:tmk_core/common/action.c **** /** \brief Removes the given weak modifiers and sends a keyboard report immediately.
 916:tmk_core/common/action.c ****  *
 917:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 918:tmk_core/common/action.c ****  */
 919:tmk_core/common/action.c **** void unregister_weak_mods(uint8_t mods) {
 2307               		.loc 1 919 41 is_stmt 1 view -0
 2308               		.cfi_startproc
 2309               	/* prologue: function */
 2310               	/* frame size = 0 */
 2311               	/* stack size = 0 */
 2312               	.L__stack_usage = 0
 920:tmk_core/common/action.c ****     if (mods) {
 2313               		.loc 1 920 5 view .LVU614
 2314               		.loc 1 920 8 is_stmt 0 view .LVU615
 2315 0000 8823      		tst r24
 2316 0002 01F0      		breq .L217
 921:tmk_core/common/action.c ****         del_weak_mods(mods);
 2317               		.loc 1 921 9 is_stmt 1 view .LVU616
 2318 0004 0E94 0000 		call del_weak_mods
 2319               	.LVL247:
 922:tmk_core/common/action.c ****         send_keyboard_report();
 2320               		.loc 1 922 9 view .LVU617
 2321 0008 0C94 0000 		jmp send_keyboard_report
 2322               	.LVL248:
 2323               	.L217:
 2324               	/* epilogue start */
 923:tmk_core/common/action.c ****     }
 924:tmk_core/common/action.c **** }
 2325               		.loc 1 924 1 is_stmt 0 view .LVU618
 2326 000c 0895      		ret
 2327               		.cfi_endproc
 2328               	.LFE118:
 2330               		.section	.text.clear_keyboard_but_mods_and_keys,"ax",@progbits
 2331               	.global	clear_keyboard_but_mods_and_keys
 2333               	clear_keyboard_but_mods_and_keys:
 2334               	.LFB121:
 925:tmk_core/common/action.c **** 
 926:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 927:tmk_core/common/action.c ****  *
 928:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 929:tmk_core/common/action.c ****  */
 930:tmk_core/common/action.c **** void clear_keyboard(void) {
 931:tmk_core/common/action.c ****     clear_mods();
 932:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 933:tmk_core/common/action.c **** }
 934:tmk_core/common/action.c **** 
 935:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 936:tmk_core/common/action.c ****  *
 937:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 938:tmk_core/common/action.c ****  */
 939:tmk_core/common/action.c **** void clear_keyboard_but_mods(void) {
 940:tmk_core/common/action.c ****     clear_keys();
 941:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 942:tmk_core/common/action.c **** }
 943:tmk_core/common/action.c **** 
 944:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 945:tmk_core/common/action.c ****  *
 946:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 947:tmk_core/common/action.c ****  */
 948:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys() {
 2335               		.loc 1 948 41 is_stmt 1 view -0
 2336               		.cfi_startproc
 2337               	/* prologue: function */
 2338               	/* frame size = 0 */
 2339               	/* stack size = 0 */
 2340               	.L__stack_usage = 0
 949:tmk_core/common/action.c ****     clear_weak_mods();
 2341               		.loc 1 949 5 view .LVU620
 2342 0000 0E94 0000 		call clear_weak_mods
 2343               	.LVL249:
 950:tmk_core/common/action.c ****     clear_macro_mods();
 2344               		.loc 1 950 5 view .LVU621
 2345 0004 0E94 0000 		call clear_macro_mods
 2346               	.LVL250:
 951:tmk_core/common/action.c ****     send_keyboard_report();
 2347               		.loc 1 951 5 view .LVU622
 2348 0008 0E94 0000 		call send_keyboard_report
 2349               	.LVL251:
 952:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 953:tmk_core/common/action.c ****     mousekey_clear();
 2350               		.loc 1 953 5 view .LVU623
 2351 000c 0E94 0000 		call mousekey_clear
 2352               	.LVL252:
 954:tmk_core/common/action.c ****     mousekey_send();
 2353               		.loc 1 954 5 view .LVU624
 2354 0010 0E94 0000 		call mousekey_send
 2355               	.LVL253:
 955:tmk_core/common/action.c **** #endif
 956:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 957:tmk_core/common/action.c ****     host_system_send(0);
 2356               		.loc 1 957 5 view .LVU625
 2357 0014 90E0      		ldi r25,0
 2358 0016 80E0      		ldi r24,0
 2359 0018 0E94 0000 		call host_system_send
 2360               	.LVL254:
 958:tmk_core/common/action.c ****     host_consumer_send(0);
 2361               		.loc 1 958 5 view .LVU626
 2362 001c 90E0      		ldi r25,0
 2363 001e 80E0      		ldi r24,0
 2364 0020 0C94 0000 		jmp host_consumer_send
 2365               	.LVL255:
 2366               		.cfi_endproc
 2367               	.LFE121:
 2369               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 2370               	.global	clear_keyboard_but_mods
 2372               	clear_keyboard_but_mods:
 2373               	.LFB120:
 939:tmk_core/common/action.c ****     clear_keys();
 2374               		.loc 1 939 36 view -0
 2375               		.cfi_startproc
 2376               	/* prologue: function */
 2377               	/* frame size = 0 */
 2378               	/* stack size = 0 */
 2379               	.L__stack_usage = 0
 940:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2380               		.loc 1 940 5 view .LVU628
 2381 0000 0E94 0000 		call clear_keys
 2382               	.LVL256:
 941:tmk_core/common/action.c **** }
 2383               		.loc 1 941 5 view .LVU629
 2384 0004 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 2385               	.LVL257:
 2386               		.cfi_endproc
 2387               	.LFE120:
 2389               		.section	.text.clear_keyboard,"ax",@progbits
 2390               	.global	clear_keyboard
 2392               	clear_keyboard:
 2393               	.LFB119:
 930:tmk_core/common/action.c ****     clear_mods();
 2394               		.loc 1 930 27 view -0
 2395               		.cfi_startproc
 2396               	/* prologue: function */
 2397               	/* frame size = 0 */
 2398               	/* stack size = 0 */
 2399               	.L__stack_usage = 0
 931:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2400               		.loc 1 931 5 view .LVU631
 2401 0000 0E94 0000 		call clear_mods
 2402               	.LVL258:
 932:tmk_core/common/action.c **** }
 2403               		.loc 1 932 5 view .LVU632
 2404 0004 0C94 0000 		jmp clear_keyboard_but_mods
 2405               	.LVL259:
 2406               		.cfi_endproc
 2407               	.LFE119:
 2409               		.section	.text.is_tap_action,"ax",@progbits
 2410               	.global	is_tap_action
 2412               	is_tap_action:
 2413               	.LVL260:
 2414               	.LFB123:
 959:tmk_core/common/action.c **** #endif
 960:tmk_core/common/action.c **** }
 961:tmk_core/common/action.c **** 
 962:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 963:tmk_core/common/action.c ****  *
 964:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 965:tmk_core/common/action.c ****  */
 966:tmk_core/common/action.c **** bool is_tap_key(keypos_t key) {
 967:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 968:tmk_core/common/action.c ****     return is_tap_action(action);
 969:tmk_core/common/action.c **** }
 970:tmk_core/common/action.c **** 
 971:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 972:tmk_core/common/action.c ****  *
 973:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 974:tmk_core/common/action.c ****  */
 975:tmk_core/common/action.c **** bool is_tap_action(action_t action) {
 2415               		.loc 1 975 37 view -0
 2416               		.cfi_startproc
 2417               	/* prologue: function */
 2418               	/* frame size = 0 */
 2419               	/* stack size = 0 */
 2420               	.L__stack_usage = 0
 976:tmk_core/common/action.c ****     switch (action.kind.id) {
 2421               		.loc 1 976 5 view .LVU634
 2422               		.loc 1 976 24 is_stmt 0 view .LVU635
 2423 0000 E92F      		mov r30,r25
 2424 0002 E295      		swap r30
 2425 0004 EF70      		andi r30,lo8(15)
 2426               		.loc 1 976 5 view .LVU636
 2427 0006 E250      		subi r30,lo8(-(-2))
 2428 0008 EE30      		cpi r30,lo8(14)
 2429 000a 00F4      		brsh .L231
 2430 000c F0E0      		ldi r31,0
 2431 000e E050      		subi r30,lo8(-(gs(.L225)))
 2432 0010 F040      		sbci r31,hi8(-(gs(.L225)))
 2433 0012 0C94 0000 		jmp __tablejump2__
 2434               		.section	.jumptables.gcc.is_tap_action,"a",@progbits
 2435               		.p2align	1
 2436               	.L225:
 2437 0000 0000      		.word gs(.L226)
 2438 0002 0000      		.word gs(.L226)
 2439 0004 0000      		.word gs(.L231)
 2440 0006 0000      		.word gs(.L231)
 2441 0008 0000      		.word gs(.L227)
 2442 000a 0000      		.word gs(.L231)
 2443 000c 0000      		.word gs(.L231)
 2444 000e 0000      		.word gs(.L231)
 2445 0010 0000      		.word gs(.L226)
 2446 0012 0000      		.word gs(.L226)
 2447 0014 0000      		.word gs(.L224)
 2448 0016 0000      		.word gs(.L231)
 2449 0018 0000      		.word gs(.L231)
 2450 001a 0000      		.word gs(.L224)
 2451               		.section	.text.is_tap_action
 2452               	.L226:
 977:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 978:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 979:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 980:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 981:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 2453               		.loc 1 981 13 is_stmt 1 view .LVU637
 2454 0016 803F      		cpi r24,lo8(-16)
 2455 0018 01F0      		breq .L234
 2456 001a 00F4      		brsh .L228
 2457 001c 883E      		cpi r24,lo8(-24)
 2458 001e 00F4      		brsh .L231
 2459               	.L234:
 982:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 983:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 984:tmk_core/common/action.c ****                 case OP_ONESHOT:
 985:tmk_core/common/action.c ****                     return true;
 2460               		.loc 1 985 28 is_stmt 0 view .LVU638
 2461 0020 81E0      		ldi r24,lo8(1)
 2462               	.LVL261:
 2463               	/* epilogue start */
 986:tmk_core/common/action.c ****             }
 987:tmk_core/common/action.c ****             return false;
 988:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 989:tmk_core/common/action.c ****             switch (action.swap.code) {
 990:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 991:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 992:tmk_core/common/action.c ****                     return true;
 993:tmk_core/common/action.c ****             }
 994:tmk_core/common/action.c ****             return false;
 995:tmk_core/common/action.c ****         case ACT_MACRO:
 996:tmk_core/common/action.c ****         case ACT_FUNCTION:
 997:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) {
 998:tmk_core/common/action.c ****                 return true;
 999:tmk_core/common/action.c ****             }
1000:tmk_core/common/action.c ****             return false;
1001:tmk_core/common/action.c ****     }
1002:tmk_core/common/action.c ****     return false;
1003:tmk_core/common/action.c **** }
 2464               		.loc 1 1003 1 view .LVU639
 2465 0022 0895      		ret
 2466               	.LVL262:
 2467               	.L228:
 2468               		.loc 1 1003 1 view .LVU640
 2469 0024 843F      		cpi r24,lo8(-12)
 2470 0026 01F0      		breq .L234
 2471               	.L231:
 987:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2472               		.loc 1 987 20 view .LVU641
 2473 0028 80E0      		ldi r24,0
 2474               	.LVL263:
 987:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2475               		.loc 1 987 20 view .LVU642
 2476 002a 0895      		ret
 2477               	.LVL264:
 2478               	.L227:
 989:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2479               		.loc 1 989 13 is_stmt 1 view .LVU643
 2480 002c 883E      		cpi r24,lo8(-24)
 2481 002e 00F0      		brlo .L234
 2482 0030 813F      		cpi r24,lo8(-15)
 2483 0032 01F4      		brne .L231
 2484 0034 00C0      		rjmp .L234
 2485               	.L224:
 997:tmk_core/common/action.c ****                 return true;
 2486               		.loc 1 997 13 view .LVU644
 997:tmk_core/common/action.c ****                 return true;
 2487               		.loc 1 997 16 is_stmt 0 view .LVU645
 2488 0036 93FB      		bst r25,3
 2489 0038 8827      		clr r24
 2490 003a 80F9      		bld r24,0
 2491               	.LVL265:
 997:tmk_core/common/action.c ****                 return true;
 2492               		.loc 1 997 16 view .LVU646
 2493 003c 0895      		ret
 2494               		.cfi_endproc
 2495               	.LFE123:
 2497               		.section	.text.is_tap_key,"ax",@progbits
 2498               	.global	is_tap_key
 2500               	is_tap_key:
 2501               	.LVL266:
 2502               	.LFB122:
 966:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2503               		.loc 1 966 31 is_stmt 1 view -0
 2504               		.cfi_startproc
 2505               	/* prologue: function */
 2506               	/* frame size = 0 */
 2507               	/* stack size = 0 */
 2508               	.L__stack_usage = 0
 967:tmk_core/common/action.c ****     return is_tap_action(action);
 2509               		.loc 1 967 5 view .LVU648
 967:tmk_core/common/action.c ****     return is_tap_action(action);
 2510               		.loc 1 967 23 is_stmt 0 view .LVU649
 2511 0000 0E94 0000 		call layer_switch_get_action
 2512               	.LVL267:
 968:tmk_core/common/action.c **** }
 2513               		.loc 1 968 5 is_stmt 1 view .LVU650
 968:tmk_core/common/action.c **** }
 2514               		.loc 1 968 12 is_stmt 0 view .LVU651
 2515 0004 0C94 0000 		jmp is_tap_action
 2516               	.LVL268:
 2517               		.cfi_endproc
 2518               	.LFE122:
 2520               		.section	.text.debug_event,"ax",@progbits
 2521               	.global	debug_event
 2523               	debug_event:
 2524               	.LFB124:
1004:tmk_core/common/action.c **** 
1005:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1006:tmk_core/common/action.c ****  *
1007:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1008:tmk_core/common/action.c ****  */
1009:tmk_core/common/action.c **** void debug_event(keyevent_t event) { dprintf("%04X%c(%u)", (event.key.row << 8 | event.key.col), (e
 2525               		.loc 1 1009 36 is_stmt 1 view -0
 2526               		.cfi_startproc
 2527 0000 CF93      		push r28
 2528               	.LCFI18:
 2529               		.cfi_def_cfa_offset 3
 2530               		.cfi_offset 28, -2
 2531 0002 DF93      		push r29
 2532               	.LCFI19:
 2533               		.cfi_def_cfa_offset 4
 2534               		.cfi_offset 29, -3
 2535 0004 00D0      		rcall .
 2536 0006 00D0      		rcall .
 2537 0008 0F92      		push __tmp_reg__
 2538               	.LCFI20:
 2539               		.cfi_def_cfa_offset 9
 2540 000a CDB7      		in r28,__SP_L__
 2541 000c DEB7      		in r29,__SP_H__
 2542               	.LCFI21:
 2543               		.cfi_def_cfa_register 28
 2544               	/* prologue: function */
 2545               	/* frame size = 5 */
 2546               	/* stack size = 7 */
 2547               	.L__stack_usage = 7
 2548               		.loc 1 1009 138 view .LVU653
 2549               	/* epilogue start */
 2550               		.loc 1 1009 1 is_stmt 0 view .LVU654
 2551 000e 0F90      		pop __tmp_reg__
 2552 0010 0F90      		pop __tmp_reg__
 2553 0012 0F90      		pop __tmp_reg__
 2554 0014 0F90      		pop __tmp_reg__
 2555 0016 0F90      		pop __tmp_reg__
 2556 0018 DF91      		pop r29
 2557 001a CF91      		pop r28
 2558 001c 0895      		ret
 2559               		.cfi_endproc
 2560               	.LFE124:
 2562               		.section	.text.debug_record,"ax",@progbits
 2563               	.global	debug_record
 2565               	debug_record:
 2566               	.LFB125:
1010:tmk_core/common/action.c **** 
1011:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1012:tmk_core/common/action.c ****  *
1013:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1014:tmk_core/common/action.c ****  */
1015:tmk_core/common/action.c **** void debug_record(keyrecord_t record) {
 2567               		.loc 1 1015 39 is_stmt 1 view -0
 2568               		.cfi_startproc
 2569 0000 CF93      		push r28
 2570               	.LCFI22:
 2571               		.cfi_def_cfa_offset 3
 2572               		.cfi_offset 28, -2
 2573 0002 DF93      		push r29
 2574               	.LCFI23:
 2575               		.cfi_def_cfa_offset 4
 2576               		.cfi_offset 29, -3
 2577 0004 00D0      		rcall .
 2578 0006 00D0      		rcall .
 2579 0008 00D0      		rcall .
 2580               	.LCFI24:
 2581               		.cfi_def_cfa_offset 10
 2582 000a CDB7      		in r28,__SP_L__
 2583 000c DEB7      		in r29,__SP_H__
 2584               	.LCFI25:
 2585               		.cfi_def_cfa_register 28
 2586               	/* prologue: function */
 2587               	/* frame size = 6 */
 2588               	/* stack size = 8 */
 2589               	.L__stack_usage = 8
1016:tmk_core/common/action.c ****     debug_event(record.event);
 2590               		.loc 1 1016 5 view .LVU656
1017:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
1018:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2591               		.loc 1 1018 77 view .LVU657
 2592               	/* epilogue start */
1019:tmk_core/common/action.c **** #endif
1020:tmk_core/common/action.c **** }
 2593               		.loc 1 1020 1 is_stmt 0 view .LVU658
 2594 000e 2696      		adiw r28,6
 2595 0010 0FB6      		in __tmp_reg__,__SREG__
 2596 0012 F894      		cli
 2597 0014 DEBF      		out __SP_H__,r29
 2598 0016 0FBE      		out __SREG__,__tmp_reg__
 2599 0018 CDBF      		out __SP_L__,r28
 2600 001a DF91      		pop r29
 2601 001c CF91      		pop r28
 2602 001e 0895      		ret
 2603               		.cfi_endproc
 2604               	.LFE125:
 2606               		.section	.text.debug_action,"ax",@progbits
 2607               	.global	debug_action
 2609               	debug_action:
 2610               	.LVL269:
 2611               	.LFB126:
1021:tmk_core/common/action.c **** 
1022:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1023:tmk_core/common/action.c ****  *
1024:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1025:tmk_core/common/action.c ****  */
1026:tmk_core/common/action.c **** void debug_action(action_t action) {
 2612               		.loc 1 1026 36 is_stmt 1 view -0
 2613               		.cfi_startproc
 2614               	/* prologue: function */
 2615               	/* frame size = 0 */
 2616               	/* stack size = 0 */
 2617               	.L__stack_usage = 0
1027:tmk_core/common/action.c ****     switch (action.kind.id) {
 2618               		.loc 1 1027 5 view .LVU660
1028:tmk_core/common/action.c ****         case ACT_LMODS:
1029:tmk_core/common/action.c ****             dprint("ACT_LMODS");
1030:tmk_core/common/action.c ****             break;
1031:tmk_core/common/action.c ****         case ACT_RMODS:
1032:tmk_core/common/action.c ****             dprint("ACT_RMODS");
1033:tmk_core/common/action.c ****             break;
1034:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1035:tmk_core/common/action.c ****             dprint("ACT_LMODS_TAP");
1036:tmk_core/common/action.c ****             break;
1037:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1038:tmk_core/common/action.c ****             dprint("ACT_RMODS_TAP");
1039:tmk_core/common/action.c ****             break;
1040:tmk_core/common/action.c ****         case ACT_USAGE:
1041:tmk_core/common/action.c ****             dprint("ACT_USAGE");
1042:tmk_core/common/action.c ****             break;
1043:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
1044:tmk_core/common/action.c ****             dprint("ACT_MOUSEKEY");
1045:tmk_core/common/action.c ****             break;
1046:tmk_core/common/action.c ****         case ACT_LAYER:
1047:tmk_core/common/action.c ****             dprint("ACT_LAYER");
1048:tmk_core/common/action.c ****             break;
1049:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
1050:tmk_core/common/action.c ****             dprint("ACT_LAYER_MODS");
1051:tmk_core/common/action.c ****             break;
1052:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1053:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP");
1054:tmk_core/common/action.c ****             break;
1055:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1056:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP_EXT");
1057:tmk_core/common/action.c ****             break;
1058:tmk_core/common/action.c ****         case ACT_MACRO:
1059:tmk_core/common/action.c ****             dprint("ACT_MACRO");
1060:tmk_core/common/action.c ****             break;
1061:tmk_core/common/action.c ****         case ACT_COMMAND:
1062:tmk_core/common/action.c ****             dprint("ACT_COMMAND");
1063:tmk_core/common/action.c ****             break;
1064:tmk_core/common/action.c ****         case ACT_FUNCTION:
1065:tmk_core/common/action.c ****             dprint("ACT_FUNCTION");
1066:tmk_core/common/action.c ****             break;
1067:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1068:tmk_core/common/action.c ****             dprint("ACT_SWAP_HANDS");
1069:tmk_core/common/action.c ****             break;
1070:tmk_core/common/action.c ****         default:
1071:tmk_core/common/action.c ****             dprint("UNKNOWN");
1072:tmk_core/common/action.c ****             break;
1073:tmk_core/common/action.c ****     }
1074:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param >> 8, action.kind.param & 0xff);
 2619               		.loc 1 1074 75 view .LVU661
 2620               	/* epilogue start */
1075:tmk_core/common/action.c **** }
 2621               		.loc 1 1075 1 is_stmt 0 view .LVU662
 2622 0000 0895      		ret
 2623               		.cfi_endproc
 2624               	.LFE126:
 2626               	.global	disable_action_cache
 2627               		.section	.bss.disable_action_cache,"aw",@nobits
 2630               	disable_action_cache:
 2631 0000 00        		.zero	1
 2632               		.comm	tp_buttons,2,1
 2633               		.text
 2634               	.Letext0:
 2635               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdint.h"
 2636               		.file 5 "tmk_core/common/keycode.h"
 2637               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2638               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2639               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 2640               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2641               		.file 10 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdio.h"
 2642               		.file 11 "tmk_core/common/report.h"
 2643               		.file 12 "tmk_core/common/host.h"
 2644               		.file 13 "tmk_core/common/mousekey.h"
 2645               		.file 14 "tmk_core/common/command.h"
 2646               		.file 15 "tmk_core/common/action_code.h"
 2647               		.file 16 "tmk_core/common/action.h"
 2648               		.file 17 "tmk_core/common/action_layer.h"
 2649               		.file 18 "tmk_core/common/action_util.h"
 2650               		.file 19 "tmk_core/common/debug.h"
 2651               		.file 20 "tmk_core/common/led.h"
 2652               		.file 21 "tmk_core/common/action_macro.h"
 2653               		.file 22 "quantum/backlight/backlight.h"
 2654               		.file 23 "tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:4      *ABS*:000000000000003f __SREG__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:13     .text.action_exec:0000000000000000 action_exec
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:94     .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:116    .text.process_record_tap_hint:0000000000000000 process_record_tap_hint
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:141    .text.register_code:0000000000000000 register_code
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:691    .text.unregister_code:0000000000000000 unregister_code
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:859    .text.tap_code:0000000000000000 tap_code
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:923    .text.register_mods:0000000000000000 register_mods
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:952    .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:981    .text.process_action:0000000000000000 process_action
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2136   .text.process_record:0000000000000000 process_record
                            *COM*:0000000000000002 tp_buttons
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2247   .text.process_record_nocache:0000000000000000 process_record_nocache
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2630   .bss.disable_action_cache:0000000000000000 disable_action_cache
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2275   .text.register_weak_mods:0000000000000000 register_weak_mods
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2304   .text.unregister_weak_mods:0000000000000000 unregister_weak_mods
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2333   .text.clear_keyboard_but_mods_and_keys:0000000000000000 clear_keyboard_but_mods_and_keys
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2372   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2392   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2412   .text.is_tap_action:0000000000000000 is_tap_action
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2500   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2523   .text.debug_event:0000000000000000 debug_event
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2565   .text.debug_record:0000000000000000 debug_record
/var/folders/q5/h5z_knjn13j9zmrblvrgn32h0000gp/T//ccedDz3Q.s:2609   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
layer_switch_get_action
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
mousekey_on
mousekey_send
del_mods
mousekey_off
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_or
default_layer_xor
default_layer_set
layer_and
layer_or
layer_xor
layer_state_set
set_oneshot_layer
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
backlight_decrease
backlight_level
backlight_increase
backlight_toggle
backlight_step
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
mousekey_clear
clear_keys
clear_mods
__do_clear_bss
